@startuml classdiagrams
'Style config
hide circle
skinparam classFontStyle bold
skinparam groupInheritance 2
set separator ::
skinparam classAttributeIconSize 0

'Class declaration

class Model::Player::Player{
    {field} -credits: int
    {field} -crew: int[3]
    {field} -distance: int
    {field} -spaceship: SpaceShip
    {field} -color: PlayerColor
    ==methods==
    ' TODO getters and setters
}

'Components

interface Model::Components::iSC as "Starship Component"{
    ==methods==
    {method} +getConnectors() : ConnectorType[4]
    {method} +getType() : ComponentType
    {method} +verify(iSpaceShip state, int position): bool
}

abstract Model::Components::SC as "Base Component" {
    {field} -connectors : ConnectorType
    {field} -type : ComponentType
    {field} -rotation: ComponentRotation
    ==methods==
    {method} +getConnectors() : ConnectorType[4]
    {method} +getType() : ComponentType
    {method} +verify(iSpaceShip state, int position): bool
}

class Model::Components::CC as "Cabin Component" {
    {field} -crew_number: int
    ==methods==
    {method} +getCrew(): int
    {method} +getCrewType(): AlienType
}

class Model::Components::ACC as "Alien Cabin Component" {
    {field} -alien_type: AlienType
    ==methods==
    {method} +getAlienType(): AlienType
    {method} +getCrew(): int
}

class Model::Components::EC as "Engine Component" {
    {field} -max_power: int
    {field} -powered: boolean
    {field} -current_power: int
    ==methods==
    {method} +turnOn(): void
    {method} +getCurrentPower(): int
}

class Model::Components::ASC as "Life Support Component" {
    {field} -type: AlienType
    ==methods==
    {field} +getType(): AlienType
}

class Model::Components::CNC as "Cannon Component"{
    {field} -max_power: int
    {field} -powered: boolean
    {field} -current_power: int
    ==methods==
    {method} +turnOn(): void
    {method} +getCurrentPower(): int
}

class Model::Components::STC as "Storage Component" {
    {field} -max_capacity: int
    {field} -shipments: ShipmentType[]
    ==methods==
    {method} +putIn(ShipmentType item): void
    {method} +getContents(): ShipmentType[]
    {method} +getCapacity(): int
}

class Model::Components::BC as "Battery Component" {
    {field} -max_capacity: int
    ==methods==
    {method} +getBatteries(): int
}

class Model::Components::SHC as "Shield Component" {
    {field} -shield_type: ShieldType
    ==methods==
    {method} +getShield(): ShieldType
}

class Model::Components::EPC as "Empty Space Component" {
    'A block with no connectors.
}

'Adventure cards
interface Model::Board::iCards{
    ==methods==
    {method} +pullCard(): iCard
}

class Model::Board::Cards{
    {field} -cards: Queue<iCard>
    ==methods==
    {method} +pullCard(): iCard
}

interface Model::iCard{ 
    ==methods==
    {method} +getTitle(): String
    {method} +getText(): String
    {method} +getEffect(): CardEffect
}

class Model::Card{
    {field} -title: String
    {field} -text: String
    {field} -effect: CardEffect
    ==methods==
    {method} +getTitle(): String
    {method} +getText(): String
    {method} +getEffect(): CardEffect
}

interface Model::iCardEffect{
    ==methods==
    {method} +apply(iSpaceShip ship): function(blablabla)
}

class Model::CardEffect{
    ' TODO capire la sintassi per includere una funzione come variabile.
    {field} -test: Functional.Predicate(iSpaceShip ship) 
    {field} -on_satisfy: Functional.Function(Player player)
    {field} -on_unsatisfy: Functional.Function(Player player)
    ==methods==
    {method} +apply(iSpaceShip ship): Functional.Function(blablabla)
}

'La planche su cui giocare
interface Model::Board::iPlanche {
    ==methods==
    {method} +getPlayerPosition(PlayerColor c): int
    {method} +getPlayersAt(int Position): PlayerColor[]
    {method} +movePlayer(PlayerColor c, int rel_change): void
    {method} +won(): PlayerColor
}

class Model::Board::PlancheCell {
    {field} -players: PlayerColor[]
    ==methods==
    {method} +getPlayers(): PlayerColor[]
}

class Model::Board::Planche {
    {field} cells: PlancheCell[]
    ==methods==
    {method} +getPlayerPosition(PlayerColor c): int
    {method} +getPlayersAt(int Position): PlayerColor[]
    {method} +movePlayer(PlayerColor c, int rel_change): void
    {method} +won(): PlayerColor
}

'Il mucchio di celle scoperte e non
interface Model::Board::iCommonBoard{
    ==methods==
    {method} +pullComponent(): Starship Component
    {method} +discardComponent(Starship Component a): void
    {method} +pullDiscarded(): Starship Component
}

class Model::Board::CommonBoard{
    {field} -covered_components: Queue<Starship Component>
    {field} -uncovered_components: ArrayList<Starship Component>
    ==methods==
    {method} +pullComponent(): Starship Component
    {method} +discardComponent(Starship Component a): void
    {method} +pullDiscarded(): Starship Component
}

interface Model::Player::iSpaceShip{
    ==methods==
    {method} +verify(): void
    {method} +add_component(Starship Component comp, int position): void
    {method} +remove_component(int position): void
    {method} +verify(): bool
    {method} +turnOn(int position): bool
    {method} +resetPower(): void
    'called and evaluates possible
}

class Model::Player::SpaceShip{
    {field} -component: Starship Component[35]
    {field} -total_power: int
    {field} -total_firing_power: int
    {field} -total_engine_power: int
    {field} -batteries: int
    ==methods==
    {method} +verify(): void
    {method} +addComponent(Starship Component comp, int position): void
    {method} +removeComponent(int position): void
    {method} +verify(): bool
    {method} +turnOn(int position): bool
    {method} +resetPower(): void
    {method} +getPower(): int
    {method} +getEnginePower(): int
    {method} +getSpeed(): int
    ----
    {method} -evaluateSpeed(): int
    {method} -evaluatePower(): int
}

'under the hood position is calculated by the client or RMI interface before being sent, so this layer of abstraction will be useful for running tests.


'Relations between classes

'Components
Model::Components::iSC^----Model::Components::SC
Model::Components::SC^----Model::Components::CC
Model::Components::CC^----Model::Components::ACC
Model::Components::SC^----Model::Components::EC
Model::Components::SC^----Model::Components::ASC
Model::Components::SC^----Model::Components::CNC
Model::Components::SC^----Model::Components::BC
Model::Components::SC^----Model::Components::STC
Model::Components::SC^----Model::Components::SHC
Model::Components::SC^----Model::Components::EPC

'Cards
Model::Board::iCards^---Model::Board::Cards
Model::iCard<----*Model::Board::Cards
Model::iCard^--Model::Card
Model::iCardEffect<--*Model::Card
Model::iCardEffect^---Model::CardEffect

'Players and ships
Model::Player::Player <--* Model::Player::iSpaceShip
Model::Player::iSpaceShip ^-- Model::Player::SpaceShip
Model::Components::SC <--  "35" Model::Player::SpaceShip

'Board
Model::Board::iPlanche^--Model::Board::Planche
Model::Board::PlancheCell<- "n" Model::Board::Planche
Model::Board::iCommonBoard ^--- Model::Board::CommonBoard
Model::Components::SC <--* "0..n covered_components" Model::Board::CommonBoard

@enduml

'⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣤⣤⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣀⣀⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
'⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣾⣿⣿⣿⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣼⣿⣿⣿⡄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
'⠀⠀⠀⠀⠀⠀⠀⠀⢀⣾⣿⣿⣿⣿⣷⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣼⣿⣿⣿⣿⣿⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀
'⠀⠀⠀⠀⠀⠀⠀⠀⣾⣿⣿⣿⣿⣿⣿⣧⠀⠀⠀⠀⠀⠀⠀⠀⠀⢰⣿⣿⣿⣿⣿⣿⣧⠀⠀⠀⠀⠀⠀⠀⠀⠀
'⠀⠀⠀⠀⠀⠀⠀⣼⣿⣿⣿⣿⣿⣿⣿⣿⣇⠀⠀⠀⠀⠀⠀⠀⢀⣿⣿⣿⣿⣿⣿⣿⣿⡆⠀⠀⠀⠀⠀⠀⠀⠀
'⠀⠀⠀⠀⠀⠀⢰⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡄⠀⠀⠀⠀⠀⠀⣼⣿⣿⣿⣿⣿⣿⣿⣿⣷⠀⠀⠀⠀⠀⠀⠀⠀
'⠀⠀⠀⠀⠀⢀⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣧⠀⠀⠀⠀⠀⢰⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡇⠀⠀⠀⠀⠀⠀⠀
'⠀⠀⠀⠀⠀⢸⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡄⠀⠀⠀⢀⣾⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣇⠀⠀⠀⠀⠀⠀⠀
'⠀⠀⠀⠀⠀⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠀⠀⠀⠀⠀⠀⠀
'⠀⠀⠀⠀⢀⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠀⠀⠀⠀⠀⠀⠀
'⠀⠀⠀⠀⢸⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠀⠀⠀⠀⠀⠀⠀
'⠀⠀⠀⠀⠈⣿⣿⣿⣿⣿⣿⠟⠉⠀⠀⠀⠙⢿⣿⣿⣿⣿⣿⣿⣿⡿⠋⠀⠀⠙⢻⣿⣿⣿⣿⠀⠀⠀⠀⠀⠀⠀
'⠀⠀⠀⠀⠀⣿⣿⣿⣿⣿⠃⠀⠀⠀⠀⣠⣄⠀⢻⣿⣿⣿⣿⣿⡿⠀⣠⣄⠀⠀⠀⢻⣿⣿⣏⠀⠀⠀⠀⠀⠀⠀
'⠀⠀⠀⠀⠀⣾⣿⣿⣿⣿⠀⠀⠀⠀⠰⣿⣿⠀⢸⣿⣿⣿⣿⣿⡇⠀⣿⣿⡇⠀⠀⢸⣿⣿⣿⠀⠀⠀⠀⠀⠀⠀
'⠀⠀⠀⠀⠀⣿⣿⣿⣿⣿⣄⠀⠀⠀⠀⠙⠃⠀⣼⣿⣿⣿⣿⣿⣇⠀⠙⠛⠁⠀⠀⣼⣿⣿⣿⡇⠀⠀⠀⠀⠀⠀
'⠀⠀⠀⠀⠀⣿⣿⣿⣿⣿⣿⣷⣤⣄⣀⣠⣤⣾⣿⣿⣿⣿⣽⣿⣿⣦⣄⣀⣀⣤⣾⣿⣿⣿⣿⠃⠀⠀⢀⣀⠀⠀
'⠰⡶⠶⠶⠶⠿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡟⠛⠉⠉⠙⠛⠋⠀
'⠀⠀⢀⣀⣠⣤⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡿⠷⠶⠶⠶⢤⣤⣀⠀
'⠀⠛⠋⠉⠁⠀⣀⣴⡿⢿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣯⣤⣀⡀⠀⠀⠀⠀⠘⠃
'⠀⠀⢀⣤⡶⠟⠉⠁⠀⠀⠉⠛⠿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠿⠟⠉⠀⠀⠀⠉⠙⠳⠶⣄⡀⠀⠀
'⠀⠀⠙⠁⠀⠀⠀⠀⠀⠀⠀⠀⢰⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡏⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠉⠁⠀⠀
'⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢠⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣷⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
'⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣾⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
'⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣼⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
'⠀⠀⠀⠀⠀⠀⠀⠀⠀⣸⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣷⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
'⠀⠀⠀⠀⠀⠀⠀⠀⣴⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡆⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
'⠀⠀⠀⠀⠀⠀⠀⣴⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
'⠀⠀⠀⠀⠀⠀⣰⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡆⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
'⠀⠀⠀⠀⠀⢰⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣷⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
'⠀⠀⠀⠀⢀⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
'⠀⠀⠀⠀⣸⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣷⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀

