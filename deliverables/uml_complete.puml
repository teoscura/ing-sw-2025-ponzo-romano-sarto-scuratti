@startuml uml_complete
hide circle
skinparam classFontStyle bold
skinparam groupInheritance 1
set separator ::
skinparam classAttributeIconSize 12

package Model {

    package Cards {

        package State {

            Model::State::VoyageState --d-- CardState:state
            abstract CardState {
                {method} + init(ClientState) : void
                {method} + [abstract] validate() : void
                {method} + [abstract] getClientCardState() : ClientCardState
                {method} + [abstract] getNext() : CardState
                {method} + transition() : void
                {method} + setNewShipCentre(Player, ShipCoords) : void
                {method} + turnOn(Player, ShipCoords, ShipCoords) : void
                {method} + removeCrew(Player, ShipCoords): void
                {method} + moveCargo(Player, ShipmentType, ShipCoords, ShipCoords) : void
                {method} + takeCargo(Player, ShipmentType, ShipCoords) : void
                {method} + discardCargo(Player, ShipmentType, ShipCoords) : void
                {method} + selectLanding(Player, int) : void
                {method} + progressTurn(Player) : void
                {method} + setTakeReward(Player, boolean) : void
                {method} + connect(Player) : void
                {method} + disconnect(Player) : void
            }

            CardState ^.r AbandonedShipAnnounceState
            class AbandonedShipAnnounceState {
                {field} [final] card : AbandonedShipCard
                {field} [final] list : List<Player>
                {field} responded : boolean
                {field} id : int
                {method} + init(ClientState) : void
                {method} + validate(ServerMessage) : void
                {method} + getClientCardState() : ClientCardState
                {method} + getNext() : CardState
                {method} + selectLanding(Player, int) : void
                {method} + disconnect(Player) : void
            }

            CardState ^.. AbandonedShipRewardState
            class AbandonedShipRewardState {
                {field} [final] card : AbandonedShipCard
                {field} [final] list : List<Player>
                {field} coords : List<ShipCoords>
                {field} responded : boolean
                {method} + init(ClientState) : void
                {method} + validate(ServerMessage) : void
                {method} + getClientCardState() : ClientCardState
                {method} + getNext() : CardState
                {method} + removeCrew(Player, ShipCoords) : void
                {method} + disconnect(Player) : void
            }

            CardState ^.l AbandonedStationAnnounceState
            class AbandonedStationAnnounceState {
                {field} [final] card : AbandonedStationCard
                {field} [final] list : List<Player>
                {field} responded : boolean
                {field} id : int
                {method} + init(ClientState) : void
                {method} + validate(ServerMessage) : void
                {method} + getClientCardState() : ClientCardState
                {method} + getNext() : CardState
                {method} + selectLanding(Player, int) : void
                {method} + disconnect(Player) : void
            }

            CardState ^.. AbandonedStationRewardState
            class AbandonedStationRewardState {
                {field} [final] card : AbandonedStationCard
                {field} [final] list : List<Player>
                {field} responded : boolean
                {method} + init(ClientState) : void
                {method} + validate(ServerMessage) : void
                {method} + getClientCardState() : ClientCardState
                {method} + getNext() : CardState
                {method} + takeCargo(Player, ShipmentType, ShipCoords) : void
                {method} + moveCargo(Player, ShipmentType, ShipCoords, ShipCoords) : void
                {method} + discardCargo(Player, ShipmentType, ShipCoords) : void
                {method} + progressTurn(Player) : void
                {method} + disconnect(Player) : void

            }

            CardState ^.r CombatZoneAnnounceState
            class CombatZoneAnnounceState {
                {field} [final] card_id : int
                {field} [final] sections : List<CombatZoneSection>
                {field} [final] shots : ProjectileArray
                {field} awaiting : List<Player>
                {field} target : Player
                {method} + init(ClientState) : void
                {method} + validate(ServerMessage) : void
                {method} + getClientCardState() : ClientCardState
                {method} + getNext() : CardState
                {method} + turnOn(Player, ShipCoords, ShipCoords) : void
                {method} + progressTurn(Player) : void
                {method} + disconnect(Player) : void
            }

            CardState ^.. CombatZonePenaltyState
            class CombatZonePenaltyState {
                {field} [final] card_id : int
                {field} [final] sections : List<CombatZoneSection>
                {field} [final] shots : ProjectileArray
                {field} target : Player
                {field} [final] required : int[]
                {field} responded : boolean
                {field} coords : List<ShipCoords>
                {method} + init(ClientState) : void
                {method} + validate(ServerMessage) : void
                {method} + getClientCardState() : ClientCardState
                {method} + getNext() : CardState
                {method} + turnOn(Player, ShipCoords, ShipCoords) : void
                {method} + progressTurn(Player) : void
                {method} + removeCrew(Player, ShipCoords) : void
                {method} + discardCargo(Player, ShipmentType, ShipCoords) : void
                {method} + disconnect(Player) : void
            }

            CardState ^.l CombatZoneSelectShipState
            class CombatZoneSelectShipState {
                {field} [final] card_id : int
                {field} [final] sections : ArrayList<CombatZoneSection>
                {field} [final] shots : ProjectileArray
                {field} [final] target : Player
                {method} + init(ClientState) : void
                {method} + validate(ServerMessage) : void
                {method} + getClientCardState() : ClientCardState
                {method} + getNext() : CardState
                {method} + selectBlob(Player, ShipCoords) : void
                {method} + disconnect(Player) : void
            }

            CardState ^.. EpidemicState
            class EpidemicState {
                {field} [final] card : EpidemicCard
                {field} [final] awaiting : List<Player>
                {method} + init(ClientState) : void
                {method} + validate(ServerMessage) : void
                {method} + getClientCardState() : ClientCardState
                {method} + getNext() : CardState
                {method} + progressTurn(Player) : void
                {method} + disconnect(Player) : void
            }

            CardState ^.r MeteorAnnounceState
            class MeteorAnnounceState {
                {field} [final] card_id : int
                {field} [final] left : ProjectileArray
                {field} [final] awaiting : List<Player>
                {field} broke_cabin : boolean
                {method} + init(ClientState) : void
                {method} + validate(ServerMessage) : void
                {method} + getClientCardState() : ClientCardState
                {method} + getNext() : CardState
                {method} + turnOn(Player, ShipCoords, ShipCoords) : void
                {method} + progressTurn(Player) : void
                {method} + disconnect(Player) : void
            }

            CardState ^.. MeteorSelectShipState
            class MeteorSelectShipState {
                {field} [final] card_id : int
                {field} [final] left : ProjectileArray
                {method} + init(ClientState) : void
                {method} + validate(ServerMessage) : void
                {method} + getClientCardState() : ClientCardState
                {method} + getNext() : CardState
                {method} + selectBlob(Player, ShipCoords) : void
                {method} + disconnect(Player) : void
            }

            CardState ^.l OpenSpaceState
            class OpenSpaceState {
                {field} [final] card : OpenSpaceCard
                {field} [final] awaiting : List<Player>
                {method} + init(ClientState) : void
                {method} + validate(ServerMessage) : void
                {method} + getClientCardState() : ClientCardState
                {method} + getNext() : CardState
                {method} + turnOn(Player, ShipCoords, ShipCoords) : void
                {method} + progressTurn(Player) : void
                {method} + disconnect(Player) : void
            }

            CardState ^.. PiratesAnnounceState
            class PiratesAnnounceState {
                {field} [final] card : PiratesCard
                {field} [final] list : List<Player>
                {field} responded : boolean
                {field} result : boolean
                {method} + init(ClientState) : void
                {method} + validate(ServerMessage) : void
                {method} + getClientCardState() : ClientCardState
                {method} + getNext() : CardState
                {method} + turnOn(Player, ShipCoords, ShipCoords) : void
                {method} + progressTurn(Player) : void
                {method} + disconnect(Player) : void
            }

            CardState ^.r PiratesSelectShipState
            class PiratesSelectShipState {
                {field} [final] card : PiratesCard
                {field} [final] list : List<Player>
                {field} [final] shots : ProjectileArray
                {method} + init(ClientState) : void
                {method} + validate(ServerMessage) : void
                {method} + getClientCardState() : ClientCardState
                {method} + getNext() : CardState
                {method} + selectBlob(Player, ShipCoords) : void
                {metohd} + disconnect(Player) : void
            }

            CardState ^.. PiratesPenaltyState
            class PiratesPenaltyState {
                {field} [final] card : PiratesCard
                {field} [final] list : List<Player>
                {field} [final] shots : ProjectileArray
                {field} responded : boolean
                {method} + init(ClientState) : void
                {method} + validate(ServerMessage) : void
                {method} + getClientCardState() : ClientCardState
                {method} [protected] getNext() : CardState
                {method} + turnOn(Player, ShipCoords, ShipCoords) : void
                {method} + progressTurn(Player) : void
                {method} + disconnect(Player) : void
            }

            CardState ^.l PiratesRewardState
            class PiratesRewardState {
                {field} [final] card : PiratesCard
                {field} [final] list : List<Player>
                {field} responded : boolean
                {field} took_reward : boolean
                {method} + init(ClientState) : void
                {method} + validate(ServerMessage) : void
                {method} + getClientCardState() : ClientCardState
                {method} [protected] getNext() : CardState
                {method} + setTakeReward(Player, boolean) : void
                {method} + disconnect(Player) : void
            }

            CardState ^.. PlanetAnnounceState
            class PlanetAnnounceState {
                {field} [final] card : PlanetCard
                {field} [final] list : List<Player>
                {field} responded : boolean
                {field} id : int
                {method} + init(ClientState) : void
                {method} + validate(ServerMessage) : void
                {method} + getClientCardState() : ClientCardState
                {method} + getNext() : CardState
                {method} + selectLanding(Player, int) : void
                {method} + disconnect(Player) : void
            }

            CardState ^.r PlanetRewardState
            class PlanetRewardState {
                {field} [final] card : PlanetCard
                {field} [final] list : List<Player>
                {field} [final] id : int
                {field} responded : boolean
                {method} + init(ClientState) : void
                {method} + validate(ServerMessage) : void
                {method} + getClientCardState() : ClientCardState
                {method} + getNext() : CardState
                {method} + takeCargo(Player, ShipmentType, ShipCoords) : void
                {method} + moveCargo(Player, ShipmentType, ShipCoords, ShipCoords) : void
                {method} + discardCargo(Player, ShipmentType, ShipCoords) : void
                {method} + progressTurn(Player) : void
                {method} + disconnect(Player) : void
            }

            CardState ^.. SlaversAnnounceState
            class SlaversAnnounceState {
                {field} [final] card : SlaversCard
                {field} [final] list : List<Player>
                {field} responded : boolean
                {field} result : boolean
                {method} + init(ClientState) : void
                {method} + validate(ServerMessage) : void
                {method} + getClientCardState() : ClientCardState
                {method} + getNext() : CardState
                {method} + turnOn(Player, ShipCoords, ShipCoords) : void
                {method} + progressTurn(Player) : void
                {method} + disconnect(Player) : void
            }

            CardState ^.l SlaversLoseState
            class SlaversLoseState {
                {field} [final] card : SlaversCard
                {field} [final] list : List<Player>
                {field} responded : boolean
                {field} coords : List<ShipCoords>
                {method} + init(ClientState) : void
                {method} + validate(ServerMessage) : void
                {method} + getClientCardState() : ClientCardState
                {method} + getNext() : CardState
                {method} + removeCrew(Player, ShipCoords) : void
                {method} + disconnect(Player) : void
            }

            CardState ^.. SlaversRewardState
            class SlaversRewardState {
                {field} [final] card : SlaversCard
                {field} [final] list : List<Player>
                {field} responded : boolean
                {field} took_reward : boolean
                {method} + init(ClientState) : void
                {method} + validate(ServerMessage) : void
                {method} + getClientCardState() : ClientCardState
                {method} + getNext() : CardState
                {method} + setTakeReward(Player, boolean) : void
                {method} + disconnect(Player) : void
            }

            CardState ^.r SmugglersAnnounceState
            class SmugglersAnnounceState {
                {field} [final] card : SmugglersCard
                {field} [final] list : List<Player>
                {field} responded : boolean
                {field} result : boolean
                {method} + init(ClientState) : void
                {method} + validate(ServerMessage) : void
                {method} + getClientCardState() : ClientCardState
                {method} + getNext() : CardState
                {method} + turnOn(Player, ShipCoords, ShipCoords) : void
                {method} + progressTurn(Player) : void
                {method} + disconnect(player) : void
            }

            CardState ^.. SmugglersLoseState
            class SmugglersLoseState {
                {field} [final] card : SmugglersCard
                {field} [final] list : List<Player>
                {field} [final] required : int[]
                {field} responded : boolean
                {method} + init(ClientState) : void
                {method} + validate(ServerMessage) : void
                {method} + getClientCardState() : ClientCardState
                {method} + getNext() : CardState
                {method} + discardCargo(Player, ShipmentType, ShipCoords) : void
                {method} + disconnect(Player) : void
            }

            CardState ^.l SmugglersRewardState
            class SmugglersRewardState {
                {field} [final] card : SmugglersCard
                {field} [final] list : List<Player>
                {field} responded : boolean
                {field} took_reward : boolean
                {method} + init(ClientState) : void
                {method} + validate(ServerMessage) : void
                {method} + getClientCardState() : ClientCardState
                {method} + getNext() : CardState
                {method} + takeCargo(Player, ShipmentType, ShipCoords) : void
                {method} + moveCargo(Player, ShipmentType, ShipCoords, ShipCoords) : void
                {method} + discardCargo(Player, ShipmentType, ShipCoords) : void
                {method} + progressTurn(Player) : void
                {method} + disconnect(Player) : void
            }

            CardState ^.. StardustState
            class StardustState {
                {field} [final] card : StardustCard
                {field} awaiting : List<Player>
                {method} + init(ClientState) : void
                {method} + validate(ServerMessage) : void
                {method} + getClientCardState() : ClientCardState
                {method} + getNext() : CardState
                {method} + progressTurn(Player) : void
            }

            CardState ^.r SelectShipReconnectState
            class SelectShipReconnectState {
                {field} [final] resume : CardState
                {field} [final] awaiting : Player
                {method} + init(ClientState) : void
                {method} + validate(ServerMessage) : void
                {method} + getClientCardState() : ClientCardState
                {method} + getNext() : CardState
                {method} + selectBlob(Player, ShipCoords) : void
                {method} + disconnect(Player) : void
            }
        }

        package Utils {

            class CombatZoneSection {
                {field} [final] criteria : CombatZoneCriteria
                {field} [final] penalty : CombatZonePenalty
                {field} [final] amount : int
                {method} + getCriteria)() : CombatZoneCriteria
                {method} + getPenalty() : CombatZonePenalty
                {method} + getAmount() : int
            }

            class Planet {
                {field} [final] contains : int[]
                {field} [final] visited : boolean
                {method} + getContains() : int[]
                {method} + visit() : void
                {method} + getVisited() : boolean
                {method} + getTotalContains() : int
            }
            
            class Projectile {
                {field} [final] direction : ProjectileDirection
                {field} [final] dimension : ProjectileDimension
                {field} [final] offset : int
                {method} + getDirection() : ProjectileDirection
                {method} + getDimension() : PrjectileDimension
                {method} + getOffset() : int
            }         

            class ProjectileArray {
                {field} [field] projectiles : List<Projectile>
                {method} + getProjectiles : List<Projectile>
            }
        }

        package Visitors {
            
            class ContainerMoveValidationVisitor {
                {field} [final] searching_for : ShipmentType
                {field} found : boolean
                {method} + visit(StorageComponent) : void
            }

            class ContainsLoaderVisitor {
                {field} [final] ship : SpaceShip
                {field} [final] cargo : ShipmentType
                {method} + visit(StorageComponent) : void
            }
            
            class ContainsRemoveVisitor {
                {field} [final] searching : shipmentType
                {method} + visit(StorageComponent) : void
                {method} + visit(BatteryCompoent) : void
            }

            class CrewRemoveVisitor {
                {field} [final] ship : SpaceShip
                {field} searching : ShipmentType
                {method} + changeType(ShipmentType) : void
                {method} + visit(CabinComponent) : void
                {method} + visit(AlienLifeSupportComponent) : void
            }

            class LargeMeteorVisitor {
                {field} d : ProjectileDirection
                {field} found_cannon : boolean
                {method} + visit(CannonComponent) : void
            }

        }

        interface iCard <<interface>> {
            {method} getId() : int
            {method} getDays() : int
            {method} getState(VoyageState) : CardState
            {method} getExhausted() : boolean
        }

        iCard^--Card
        abstract Card <<abstract>> {
            {field} id : int
            {field} days : int
            {field} exhausted : boolean
            {method} + getId() : int
            {method} + getDays() : int
            {method} + getExhausted() : boolean
            {method} [protected] exhaust() : void
        }

        Card ^.r AbandonedShipCard
        class AbandonedShipCard {
            {field} credits_gained : int
            {field} crew_lost : int
            {method} + getState(VoyageState) : CardState
            {method} + getCredits() : int
            {method} + getCrewLost() : int
            {method} + apply(VoyageState, Player, int) : void
        }

        Card ^.. AbandonedStationCard
        class AbandonedStationCard {
            {field} planet : Planet
            {field} crew : int
            {method} + getState(VoyageState) : CardState
            {method} + getPlanet() : Planet
            {method} + getCrewLost() : int
            {method} + apply(VoyageState, Player, int) : void
        }

        Card ^.l CombatZoneCard
        class CombatZoneCard {
            {field} sections : List<CombatZoneSection>
            {field} shots : ProjectileArray
            {method} + getState(VoyageState) : C
        }

        Card ^.. EpidemicCard
        class EpidemicCard {
            {method} + getState(VoyageState) : CardState
            {method} + apply(VoyageState, Player) : void
        }

        Card ^.r MeteorSwarmCard
        class MeteorSwarmCard {
            {field} meteorites : ProjectileArray
            {method} + getState(VoyageState) : CardState
            {method} + getMeteorites() : ProjectileArray
            {method} + apply(VoyageState, Projectile) : void
        }

        Card ^.. OpenSpaceCard
        class OpenSpaceCard {
            {method} + getState(VoyageState) : CardState
            {method} + apply(VoyageState, Player) : void
        }

        Card ^.l PiratesCard
        class PiratesCard {
            {field} [final] shots : ProjectileArray
            {field} [field] credits : int
            {field} [final] min_power : int
            {method} + getState(VoyageState) : CardState
            {method} + getCredits() : int
            {method} + getShots() : ProjectileArray
            {method} + apply(VoyageState, Player) : void
        }

        Card ^.. PlanetCard
        class PlanetCard {
            {field} [final] planets : List<Planet>
            {field} [final] left : int
            {method} + getState(VoyageState) : CardState
            {method} + getVisited() : List<boolean>
            {method} + getPlanet() : Planet
            {method} + getSize() : int
            {method} + apply(Player, int) : void
        }

        Card ^.r SlaversCard
        class SlaversCard {
            {field} [final] min_power : int
            {field} [final] crew_penalty : int
            {field} [final] credits : int
            {method} + getState(VoyageState) : CardState
            {method} + getCrewLost() : int
            {method} + getCredits() : int
            {method} + apply(VoyageState, Player) : void
        }

        Card ^.. SmugglersCard
        class SmugglersCard {
            {field} [final] reward : planet
            {field} [final] cargo_taken : int
            {field} [field] min_power : int
            {method} + getState(VoyageState) : CardState
            {method} + getReward() : Planet
            {method} + getCargoPenalty() : int
            {method} + apply(player) : void
        }

        Card ^.l StardustCard
        class StardustCard {
            {method} + getState(VoyageState) : CardState
            {method} + apply(VoyageState, Player) : void
        }
    }

    Components::Visitors::iVisitor .. ContainsLoaderVisitor
    Components::Visitors::iVisitor .. ContainsRemoveVisitor
    Components::Visitors::iVisitor .. CrewRemoveVisitor
    Components::Visitors::iVisitor .. LargeMeteorVisitor

    package Board {

        interface iCards <<interface>> {
            {method} pullCard() : iCard
            {method} getLeft() : int
            {method} getConstructionCards : List<Integer>
        }

        iCards ^--  TestFlightCards
        class TestFlightCards {
            {field} [final] cards : ArrayDeque<iCard>
            {method} + pullCard() : iCard
            {method} + getLeft() : int
            {method} + getConstructionCards : List<Integer>
        }

        iCards ^--  LevelTwoCards
        class LevelTwoCards {
            {field} cards : ArrayDeque<iCard>
            {field} construction_cards : ArrayList<Integer>
            {method} + pullCard() : iCard
            {method} + getLeft() : int
            {method} + getConstructionCards : List<Integer>
        }

        interface iCommonBoard <<interface>> {
            {method} getCoveredSize() : int
            {method} pullComponent() : BaseComponent
            {method} discardComponent(BaseComponent) : void
            {method} pullDiscarded(int) : BaseComponent
            {method} getDiscarded() : ArrayList<Integer>
        }

        iCommonBoard^..CommonBoard
        class CommonBoard {
            {field} [final] covered_components : ArrayDeque<BaseComponent>
            {field} [final] discarded_components : HashMap<Integer, BaseComponent>
            {method} + getCoveredSize() : int
            {method} + pullComponent() : BaseComponent
            {method} + discardComponent(BaseComponent) : void
            {method} + pullDiscarded(int) : BaseComponent
            {method} + getDiscarded() : ArrayList<Integer>
        }

        interface iPlanche <<interface>> {
            {method} getPlayerPosition(Player) : int
            {method} getPlayerAt(int) : Player
            {method} movePlayer(VoyageState, Player, int) : void
            {method} loseGame(Player) : void
        }


        iPlanche^..Planche
        class Planche{
            {field} [final] planche : HashMap<Player, Integer>
            {field} [final] length : int
            {method} + getPlayerPosition(Player) : int
            {method} + getPlayerAt(int) : Player
            {method} + movePlayer(VoyageState, Player, int) : void
            {method} + loseGame(Player) : void
        }
    }

    package Components {
        
        package Visitors {

            interface iVisitor <<interface>> {
                {method} + visit(CabinComponent) : void
                {method} + visit(EngineComponent) : void
                {method} + visit(AlienLifeSupportComponent) : void
                {method} + visit(CannonComponent) : void
                {method} + visit(StorageComponent) : void
                {method} + visit(BatteryComponent) : void
                {method} + visit(ShieldComponent) : void
                {method} + visit(EmptyComponent) : void
                {method} + visit(StructuralComponent) : void
                {method} + visit(StartingCabinComponent) : void
            }

            iVisitor^..CabinVisitor
            class CabinVisitor {
                {field} type : AlienType
                {method} + getSupportedType() : AlienType
                {method} + visit(AlienLifeSupportComponent) : void
            }

            iVisitor^--CrewSetVisitor
            class CrewSetVisitor {
                {field} [field] ship : SpaceShip
                {field} [field] type : AlienType
                {method} + visit(CabinComponent) : void
            }

            iVisitor^..EnergyVisitor
            class EnergyVisitor {
                {field} positive : boolean
                {field} found_battery : boolean
                {field} powerable : boolean
                {field} has_battery : boolean
                {method} + visit(BaseComponent) : void
                {method} + getFoundBatteryComponent() : boolean
                {method} + getPowerable() : boolean
                {method} + hasBattery() : boolean
                {method} + toggle() : void
            }

            iVisitor^..FreeSpaceVisitor
            class FreeSpaceVisitor {
                {field} isfree : boolean
                {method} + visit(BaseComponent) : void
                {method} + getSpaceIsFree() : boolean
            }

            class LifeSupportUpdateVisitor {
                {field} [final] type : AlienType
                {field} still_alive : boolean
                {method} + getStillAlive() : boolean
                {method} + visit(CabinComponent) : void
                {method} + visit(AlienLifeSupportComponent) : void
            }

            iVisitor^..SpaceShipUpdateVisitor
            class SpaceShipUpdateVisitor {
                {field} [final] containers : int[]
                {field} [final] crew_members : int[]
                {field} [field] directions : boolean[]
                {field} engine_power : int
                {field} cannon_power : double
                {method} + visit(BaseComponent) : void
                {method} + getEnginePower() : int
                {method} + getCannonPower() : double
                {method} + getContainers() : int[]
                {method} + getCrewMembers() : int[]
                {method} + getDirections() : boolean[]
            }
        
        }

        abstract BaseComponent <<abstract>> {
            {field} [final] id : int
            {field} [final] connectors : ConnectorType[]
            {field} [protected] coords : ShipCoords
            {field} rotation : ComponentRotation
            {method} + getID() : int
            {method} + getConnectors() : ConnectorType[]
            {method} + getRotation() : ComponentRotation
            {method} + rotate(ComponentRotation) : void
            {method} + verify(SpaceShip) : boolean
            {method} + getConnector(ComponentRotation) : ConnectorType
            {method} + getCoords() : ShipCoords
            {method} + powerable() : boolean
            {method} + [abstract] onCreation(SpaceShip, ShipCoords) : void
            {method} + [abstract] onDelete(SpaceShip) : void
            {method} + [abstract] getClientComponent() : ClientComponent
            {method} + [abstract] check(iVisitor) : void
            {method} + getConnectedComponents(SpaceShip) : BaseComponent[]


        }

        BaseComponent ^.l AlienLifeSupportComponent
        class AlienLifeSupportComponent{
          
			{field} - type: AlienType
			{method} + check(iVisitor) : void
			{method} + getType() : AlienType
			{method} + onCreation(SpaceShip) : void
			{method} + onDelete(SpaceShip) : void
			{method} + getClientComponent() : ClientComponent
		}

        BaseComponent ^.. BatteryComponent
        class BatteryComponent {
			{field} - contains : int
			{field} - max : int
			{method} + check(iVisitor) : void
			{method} + getContains() : int
			{method} + getCapacity() : int
			{method} + takeOne() : void
			{method} + putOne() : void
			{method} + onCreation(SpaceShip) : void
			{method} + onDelete(SpaceShip) : void
			{method} + getClientComponent() : ClientComponent
		}

        BaseComponent ^.r CabinComponent
        class CabinComponent{
			{field} - crew_number : int
			{field} - crew_type : AlienType
		   	{method} + check(iVisitor) : void
			{method} + getCrew() : int
			{method} + getCrewType() : AlienType			
			{method} + setCrew(SpaceShip, int, AlienType) : void
			{method} + onCreation(SpaceShip) : void
			{method} + onDelete(SpaceShip) : void
			{method} + getClientComponent() : ClientComponent
		}

        BaseComponent ^.. StartingCabinComponent
        class StartingCabinComponent{
			{field} - color : PlayerColor
			{field} - crew_number : int
		   	{method} + check(iVisitor) : void
			{method} + getCrew() : int
			{method} + getCrewType() : AlienType		
			{method} + getColor() : PlayerColor
			{method} + setCrew(SpaceShip, int, AlienType)
			{method} + onCreation(SpaceShip) : void
			{method} + onDelete(SpaceShip) : void
			{method} + getClientComponent() : ClientComponent
		}

        BaseComponent ^.l CannonComponent
        class CannonComponent{			
			{field} - max_power : int
			{field} - powered : boolean
			{field} - powerable : boolean
			{method} + check(iVisitor) : void
			{method} + verify(SpaceShip) : boolean
			{method} + turnOn() : void
			{method} + turnOff() : void
			{method} + getCurrentPower() : int
			{method} + getPower() : int
			{method} + powerable() : boolean		
			{method} + onCreation(SpaceShip) : void
			{method} + onDelete(SpaceShip) : void
			{method} + getClientComponent() : ClientComponent
		}

        BaseComponent ^.. EmptyComponent
        class EmptyComponent{
			{method} + verify(SpaceShip) : boolean
			{method} + check(iVisitor) : void
			{method} + getConnectors() : ConnectorType[]
			{method} + onCreation(SpaceShip) : void
			{method} + onDelete(SpaceShip) : void
			{method} + getClientComponent() : ClientComponent
		}

        BaseComponent ^.r EngineComponent
        class EngineComponent{
			{field} - max_power : int
			{field} - powered : boolean
			{field} - powerable : boolean
			{method} + verify(SpaceShip) : boolean
			{method} + check(iVisitor) : void
			{method} + turnOn() : void
			{method} + turnOff() : void
			{method} + getCurrentPower() : int
			{method} + getPower() : int
			{method} + powerable() : boolean		
			{method} + onCreation(SpaceShip) : void
			{method} + onDelete(SpaceShip) : void
			{method} + getClientComponent() : ClientComponent
		}

        BaseComponent ^.. ShieldComponent
        class ShieldComponent{
			{field} - powered : boolean
			{method} + check(iVisitor) : void
			{method} + turnOn() : void
			{method} + turnOff() : void
			{method} + getPowered() : boolean
			{method} + powerable() : boolean	
			{method} + onCreation(SpaceShip) : void
			{method} + onDelete(SpaceShip) : void
			{method} + getShield() : ShieldType
			{method} + getClientComponent() : ClientComponent

		}
        
		BaseComponent ^.l StorageComponent
        class StorageComponent{
			{field} - [final] shipment : int []
			{field} - [final] type : StorageType
			{field} - currently_full : int
			{method} + putIn(ShipmentType) : void
			{method} + takeOut(ShipmentType) : boolean
			{method} + howMany(ShipmentType) : int
			{method} + getFreeSpaces() : int
			{method} + getSpecial() : boolean
			{method} + getCapacity() : int
			{method} + onCreation(SpaceShip) : void
			{method} + onDelete(SpaceShip) : void
			{method} + check(iVisitor) : void
			{method} + getClientComponent() : ClientComponent

		}
        BaseComponent ^.. StructuralComponent
        class StructuralComponent{
			{method} + check(iVisitor) : void
			{method} + onCreation(SpaceShip) : void
			{method} + onDelete(SpaceShip) : void
			{method} + getClientComponent() : ClientComponent
		}

    }

    package Player {

        SpaceShip --u-- Player:ship
        class Player {
            {field} [final] username : String
            {field} [final] color : PlayerColor
            {field} [transient] descriptor : ClientDescriptor
            {field} credits : int
            {field} retired : boolean
            {field} disconnected : boolean
            {method} + getUsername() : String
            {method} + getColor() : String
            {method} + retire() : void
            {method} + getRetired : boolean
            {method} + reconnect() : void
            {method} + disconnect() : void
            {method} + getDisconnected() : boolean
            {method} + giveCredits(int) : int
            {method} + getCredits() : int
            {method} + finalScore() : void
            {method} + reconnect(ClientDescriptor) : void
            {method} + getSpaceShip() : SpaceShip
            {method} + bindDescriptor(ClientDescriptor) : void
            {method} + getDescriptor() : ClientDescriptor
            {method} + voyageInfo(iPlanche) : String
            {method} + equals : boolean
        }


        BaseComponent --u-- SpaceShip:"components[][]"
        class SpaceShip {
            {field} [final] player : Player
            {field} [final] storage_coords : ArrayList<ShipCoords>
            {field} [final] cabin_coords : ArrayList<ShipCoords>
            {field} [final] battery_coords : ArrayList<ShipCoords>
            {field} [final] powerable_coords : ArrayList<ShipCoords>
            {field} [final] type : GameModeType
            {field} [final] empty : BaseComponent
            {field} blobs : ArrayList<ArrayList<ShipCoords>>
            {field} crew : int[]
            {field} center : ShipCoords
            {field} containers : int[]
            {field} shielded_directions : boolean[]
            {field} cannon_power : double
            {field} engine_power : int
            {method} + getType() : GameModeType
            {method} + getCrew() : int[]
            {method} + bulkVerify() : VerifyResult[][]
            {method} + bulkVerifyResult() : boolean
            {method} + getBlobsSize() : int
            {method} + updateShipBlobs() : void
            {method} + verifyBlob(VerifyResult[][]) : ArrayList<ShipCoords>
            {method} + selectShipBlob(ShipCoords) : void
            {method} + addComponent(BaseComponent, ShipCoords) : void
            {method} + removeComponent(ShipCoords) : void
            {method} + updateShip() : void
            {method} + resetPower() : void
            {method} + turnOn(ShipCoords, ShipCoords) : void
            {method} + getComponent : BaseComponent
            {method} + getCannonPower() : double
            {method} + getEnginePower() : int
            {method} + getEnergyPOwer() : int
            {method} + getShieldedDirections() : int
            {method} + getHeight() : int
            {method} + getWidth() : int
            {method} + getEmpty() : BaseComponent
            {method} + addStorageCoords(ShipCoords) : void
            {method} + delStorageCoords(ShipCoords) : void
            {method} + addCabinCoords(ShipCoords) : void
            {method} + delCabinCoords(ShipCoords) : void
            {method} + addBatteryCoords(ShipCoords) : void
            {method} + delBatteryCoords(ShipCoords) : void
            {method} + addPowerableCoords(ShipCoords) : void
            {method} + delPowerableCoords(ShipCoords) : void
            {method} + getTotalCrew() : int
            {method} + findConnectedCabins() : ArrayList<ShipCoords>
            {method} + countExposedConnectors() : int
            {method} + handleMeteorite(Projectile) : void
            {method} + handleShot(Projectile) : void
            {method} + normalizeRoll(ProjectileDirection, int) : int
            {method} + getFirst(ProjectileDirection, int) : ShipCoords
            {method} + constrctCol(int) : BaseComponent[]
            {method} + findCannon(ProjectileDirection, int) : boolean
            {method} + getContains() : int[]
            {method} + isCabin(ShipCoords) : boolean
            {method} + getClientSpaceShip() : ClientSpaceShip
        }

        ShipCoords <-- "1" Components::BaseComponent
        class ShipCoords{
            {field} [final] x : int
            {field} [final] y : int
            {field} [final] type : GameModeType
            {method} + getType() : GameModeType
            {method} + getNextTo() : ShipCoords[]
            {method} + up() : ShipCoords
            {method} + down() : ShipCoords
            {method} + right() : ShipCoords
            {method} + left() : ShipCoords
            {method} + toString() : String
            {method} + equals(Object) : boolean
        }

    }

    package State {
        
        Model::Player::Player "0..n" --r-- GameState:players
        abstract GameState <<abstract>> {
            {field} # [final] model : ModelInstance 
            {field} # [final] type : GameModeType
            {field} # [final] count : PlayerCount
            {field} # [final] players : List<Player>
            {method} + [abstract] validate(ServerMessage message) : void
            {method} + [abstract] getNext() : GameState 
            {method} + [abstract] getClientState() : ClientState
            {method} + [abstract] toSerialize() : boolean
            {method} + [abstract] toString() : String
            {method} + [abstract] getOngoingEntry(int) : ClientGameListEntry
            {method} + init() : void
            {method} + broadcastMessage(ClientMessage) : void
            {method} + transition() : void
            {method} + getCount() : PlayerCount
            {method} + getPlayer(PlayerColor) : Player
            {method} + getType() : GameModeType
            {method} + getModelID() : int
            {method} + getPlayers() : ArrayList<Player>
            {method} + connect(ClientDescriptor client) : void
            {method} + disconnect(ClientDescriptor client) : void
            {method} + connect(Player) : void
            {method} + disconnect(Player) : void
            {method} + sendContinue(Player) : void
            {method} + putComponent(Player, ShipCoords coords) : void
            {method} + takeComponent(Player) : void
            {method} + takeDiscarded(Player, int) : void
            {method} + reserveComponent(Player) : void
            {method} + discardComponent(Player, int) : void
            {method} + toggleHourglass(Player) : void
            {method} + removeComponent(Player, ShipCoords coords) : void
            {method} + setCrewType(Player, ShipCoords coords, AlienType type) : void
            {method} + giveUp(Player) : void
            {method} + selectBlob(Player, ShipCoords) : void
            {method} + getCardState(Player) : CardState
        }

        GameState ^... WaitingState
        class WaitingState {
            {field} - [final] connected : List<ClientDescriptor>
            {field} - [final] count : PlayerCount
            {method} + validate(ServerMessage message) : void
            {method} + getNext() : GameState 
            {method} + getClientState() : ClientState 
            {method} + init() : void
            {method} + connect(ClientDescriptor client) : void
            {method} + disconnect(ClientDescriptor client) : void
        }

        GameState ^-- ResumeWaitingState
        class ResumeWaitingState {
            {field} - [final] next : GameState
            {field} - [final] awaiting : HashMap<String, ClientDescriptor>
            {field} - [final] count : PlayerCount
            {method} + validate(ServerMessage message) : void
            {method} + getNext() : GameState
            {method} + getClientState() : ClientState
            {method} + init() : void
            {method} - resumeState() : void
            {method} + toSerialize() : boolean
            {method} + connect(ClientDescriptor) : void
            {method} + disconnect(ClientDescriptor) : void
            {method} + toString() : String
            {method} + getOngoingEntry(int) : ClientGameListEntry
        }

        GameState ^... ConstructionState
        iCommonBoard --u---- ConstructionState:board
        iCards "1" --u---- ConstructionState:voyage_deck
        abstract ConstructionState <<abstract>> {
            {field} [final] building : ArrayList<Player>
            {field} [final] finished : ArrayList<Player>
            {field} [final] current_tile : HashMap<Player, BaseComponent>
            {field} [final] hoarded_tile : HashMap<Player, ArrayList<BaseComponent>>
            {method} + validate(ServerMessage message) : void
            {method} + getNext() : GameState 
            {method} + getClientState() : ClientState 
            {method} + init() : void
            {method} + connect(Player) : void
            {method} + disconnect(Player) : void
            {method} + sendContinue(Player) : void
            {method} + putComponent(Player, ShipCoords coords) : void
            {method} + takeComponent(Player) : void
            {method} + takeDiscarded(Player, int id) : void
            {method} + discardComponent(Player, int id) : void
            {method} + toSerialize() : boolean
            {method} + toString() : String
            {method} + getCurrent(Player) : BaseComponent
            {method} + getHoarded : ArrayList<BaseComponent>
            {method} + getDiscarded() : ArrayList<Integer>
            {method} + getOngoingEntry(int) : ClientGameListEntry
        }

        ConstructionState ^-- TestFlightConstructionState
        class TestFlightConstructionState {
            {method} + getClientState : ClientState
        }

        ConstructionState ^-- LevelTwoConstructionState
        ConstructionStateHourglass -r- LevelTwoConstructionState:hourglass
        class LevelTwoConstructionState {
            {method} + init() : void
            {method} + getClientState() : ClientState
            {method} + sendContinue(Player) : void
            {method} + putComponent(Player, int, ShipCoords, ComponentRotation) : void
            {method} + takeComponent(Player) : void
            {method} + takeDiscarded(Player, int) : void
            {method} + discardComponent(Player) ; void
            {method} + toggleHourglass(player) : void
        }

        class ConstructionStateHourglass {
            {field} [final] period : Duration
            {field} toggled : Instant
            {field} [final] total : int
            {field} times : int
            {method} + timesTotal() : int
            {method} + timesLeft() : int
            {method} + getDuration() : Duration
            {method} + start() : void
            {method} + toggle() : void
            {method} + canAct() : boolean
            {method} + isRunning() : boolean
            {method} + getInstant() : Instant
        }

        GameState ^... VerifyState
        iCards "1" --u---- VerifyState:voyage_deck
        class VerifyState {
            {field} - [final] to_clean: ArrayList<Player>
            {field} - [final] finish_order : ArrayList<Player>
            {field} - [final] awaiting : ArrayList<Player>
            {field} - [final] starts_losing : ArrayList<Player>
            {method} + validate(ServerMessage message) : void
            {method} + getNext() : GameState 
            {method} + getClientState() : ClientState 
            {method} + init() : void
            {method} + connect(Player) : void
            {method} + disconnect(Player) : void
            {method} + sendContinue(Player) : void
            {method} + removeComponent(Player, ShipCoords coords) : void
            {method} + setCrewType(Player, ShipCoords coords, AlienType type) : void
            {method} + toSerialize : boolean
            {method} + selectBlob(Player, ShipCoords) : void
            {method} + toString() : String
            {method} + getOngoingEntry(int) : ClientGameListEntry
        }

        GameState ^... VoyageState
        iPlanche "1" --u---- VoyageState:planche
        iCards "1" --u---- VoyageState:voyage_deck
        iCard "1" --u---- VoyageState:card
        CardState "1" ----u-- VoyageState:state
        class VoyageState {
            {field} - [final] to_give_up : ArrayList<Player>
            {method} + validate(ServerMessage message) : void
            {method} + getNext() : GameState 
            {method} + getClientState() : ClientState 
            {method} + init() : void
            {method} + connect(Player) : void
            {method} + disconnect(Player) : void
            {method} + giveUp(Player) : void
            {method} + getCardState(Player) : CardState
            {method} + loseGame(Player) : void
            {method} + getAllConnectedPlayers() : List<Player> 
            {method} + getOrder(CardOrder) : List<Player>
            {method} + findCriteria(CombatZoneCriteria) : Player
            {method} + getPlanche() : iPlanche 
            {method} + setCardState(CardState) : void
            {method} + toSerialize() : boolean
            {method} + toString() : String
            {method} + getOngoingEntry(int) : ClientGameListEntry
        }

        GameState ^... EndscreenState
        class EndscreenState {
            {field} - [final] awaiting : List<Player> 
            {field} - [final] order_arrival : List<Player> 
            {method} + validate(ServerMessage message) : void
            {method} + getNext() : GameState 
            {method} + getClientState() : ClientState 
            {method} + init() : void
            {method} + sendContinue(Player) : void
            {method} + disconnect(Player) : void
            {method} + toSerialize() : boolean
            {method} + toString() : boolean
            {method} + getOngoingEntry(int) : ClientGameListEntry
        }
        
    }


    State::GameState "1" ----u---- ModelInstance:state 
    class ModelInstance {
        {field} - [final] id: int
        {field} - started: boolean
        {field} - ended: boolean
        {method} + getID() : int
        {method} + validate(ServerMessage message) : void
        {method} + serialize() : void
        {method} + pauseGame() : void
        {method} + unpauseGame() : void
        {method} + cutShort() : void
        {method} + startGame() : void
        {method} + endGame() : void
        {method} + getStarted() : boolean
        {method} + getState() : GameState
        {method} + setState(GameState) : void
        {method} + resumeState(GameState) : void
        {method} + connect(ClientDescriptor) : void
        {method} + disconnect(ClientDescriptor) : void
        {method} + connect(Player) : void
        {method} + disconnect(Player) : void
        {method} + getController() : LobbyController 
        {method} + setController(LobbyController) : void 
        {method} + afterSerialRestart() : void
        {method} + broadcast(ClientMessage) : void
        {method} + getEntry() : ClientGameListEntry
    }

    package Client {
        
        package Card {
            
            interface ClientCardState <<interface>> {
                {method} showCardState(ClientView) : void
            }

            interface ClientCardStateVisitor <<interface>> { 
                {method} + show(ClientAwaitConfirmCardStateDecorator) : void
                {method} + show(ClientBaseCardState) : void
                {method} + show(ClientCargoPenaltyCardStateDecorator) : void
                {method} + show(ClientCargoRewardCardStateDecorator) : void
                {method} + show(ClientCombatZoneIndexCardStateDecorator) : void
                {method} + show(ClientCreditsRewardCardStateDecorator) : void
                {method} + show(ClientCrewPenaltyCardStateDecorator) : void
                {method} + show(ClientLandingCardStateDecorator) : void
                {method} + show(ClientMeteoriteCardStateDecorator) : void
                {method} + show(ClientNewCenterCardStateDecorator) : void
                {method} + show(ClientProjectileCardStateDecorator) : void
                {method} + show(ClientEnemyCardStateDecorator) : void
            }

            ClientCardState ^.. ClientBaseCardState
            class ClientBaseCardState {
                {field} - [final] id : int
                {field} - [final] state : String
                {method} + getState() : String
                {method} + getID() : int
                {method} + showCardState(ClientCardStateVisitor) : void
            }

            ClientCardState ^.. ClassAwaitConfirmCardStateDecorator
            ClientBaseCardState <-- ClassAwaitConfirmCardStateDecorator:base
            class ClientAwaitConfirmCardStateDecorator {
                {field} - [final] base : ClientCardState
                {field} - [final] awaiting : List<PlayerColor> 
                {method} + getAwaiting() : List<PlayerColor> 
                {method} + showCardState(ClientCardStateVisitor) : void
            }

            ClientCardState ^.. ClientCargoPenaltyCardStateDecorator
            ClientBaseCardState <-- ClientCargoPenaltyCardStateDecorator:base
            class ClientCargoPenaltyCardStateDecorator {
                {field} - [final] base : ClientCardState
                {field} - [final] turn : PlayerColor 
                {field} - [final] shipments : int[] 
                {method} + getTurn() : PlayerColor 
                {method} + getShipments() : int[] 
                {method} + showCardState(ClientCardStateVisitor) : void
            }
            
            ClientCardState ^.. ClientCargoRewardCardStateDecorator
            ClientBaseCardState <-- ClientCargoRewardCardStateDecorator:base
            class ClientCargoRewardCardStateDecorator {
                {field} - [final] base : ClientCardState
                {field} - [final] turn : PlayerColor 
                {field} - [final] days_taken : int 
                {field} - [final] shipments : int[] 
                {method} + getTurn() : PlayerColor
                {method} + getDaysTaken() : int
                {method} + getShipments() : int[] 
                {method} + showCardState(ClientCardStateVisitor) : void
            } 
            
            ClientCardState ^.. ClientCombatZoneIndexCardStateDecorator
            ClientBaseCardState <-- ClientCombatZoneIndexCardStateDecorator:base
            class ClientCombatZoneIndexCardStateDecorator {
                {field} - [final] base : ClientCardState
                {field} - [final] index : int
                {method} + getSection() : CombatZoneSection
                {method} + getIndex() : int
                {method} + showCardState(ClientView) : void
            }
            
            ClientCardState ^.. ClientCreditsRewardCardStateDecorator
            ClientBaseCardState <-- ClientCreditsRewardCardStateDecorator:base
            class ClientCreditsRewardCardStateDecorator {
                {field} - [final] base : ClientCardState
                {field} - [final] turn : PlayerColor 
                {field} - [final] credits : int 
                {field} - [final] days_taken : int 
                {method} + getTurn() : PlayerColor
                {method} + getCredits() : int
                {method} + getDaysTaken() : int 
                {method} + showCardState(ClientView) : void
            }
            
            ClientCardState ^.. ClientCrewPenaltyCardStateDecorator
            ClientBaseCardState <-- ClientCrewPenaltyCardStateDecorator:base
            class ClientCrewPenaltyCardStateDecorator {
                {field} - [final] base : ClientCardState
                {field} - [final] turn : PlayerColor 
                {field} - [final] days_taken : int 
                {method} + getTurn() : PlayerColor
                {method} + getCrewLost() : int
                {method} + showCardState(ClientView) : void
            }
            
            ClientCardState ^.. ClientLandingCardStateDecorator
            ClientBaseCardState <-- ClientLandingCardStateDecorator:base
            class ClientLandingCardStateDecorator {
                {field} - [final] base : ClientCardState
                {field} - [final] turn : PlayerColor 
                {field} - [final] days_taken : int 
                {field} - [final] crew_needed: int 
                {field} - [final] available : List<Boolean>
                {method} + getTurn() : PlayerColor
                {method} + getDaysTaken() : int
                {method} + getCrewNeeded() : int
                {method} + getAvailable() : List<Boolean>
                {method} + showCardState(ClientView) : void
            }
            
            ClientCardState ^.. ClientMeteoriteCardStateDecorator 
            ClientBaseCardState <-- ClientMeteoriteCardStateDecorator :base
            class ClientMeteoriteCardStateDecorator  {
                {field} - [final] meteorite : Projectile
                {method} + getProjectile() : Projectile
                {method} + showCardState(ClientView) : void
            }

            ClientCardState ^.. ClientNewCenterCardStateDecorator
            ClientBaseCardState <-- ClientNewCenterCardStateDecorator:base
            class ClientNewCenterCardStateDecorator {
                {field} - [final] base : ClientCardState
                {field} - [final] awaiting : List<PlayerColor>
                {method} + getAwaiting() : List<PlayerColor>
                {method} + showCardState(ClientView) : void
            }
            
            ClientCardState ^.. ClientProjectileCardStateDecorator
            ClientBaseCardState <-- ClientProjectileCardStateDecorator:base
            class ClientProjectileCardStateDecorator {
                {field} - [final] base : ClientCardState
                {field} - [final] shot : Projectile
                {method} + getProjectile() : Projectile
                {method} + showCardState(ClientView) : void
            }
        
        }
        
        package Components {
            
            interface ClientComponent <<interface>> {
                {method} + showComponent(ClientComponentVisitor) : void
            }

            interface ClientComponentVisitor <<interface>> {
                {method} + show(ClientBaseComponent) : void
                {method} + show(ClientEmptyComponent) : void
                {method} + show(ClientBatteryComponentDecorator) : void
                {method} + show(ClientBrokenVerifyComponentDecorator) : void
                {method} + show(ClientCabinComponentDecorator) : void
                {method} + show(ClientCannonComponentDecorator) : void
                {method} + show(ClientEngineComponentDecorator) : void
                {method} + show(ClientLifeSupportComponentDecorator) : void
                {method} + show(ClientPoweredComponentDecorator) : void
                {method} + show(ClientShieldComponentDecorator) : void
                {method} + show(ClientShipmentsComponentDecorator) : void
            }

            ClientComponent ^.. ClientBaseComponent
            class ClientBaseComponent {
                {field} - [final] id : int
                {field} - [final] rotation : ComponentRotation
                {field} - [final] connectors : ConnectorType[]
                {method} + getConnectors(ComponentRotation) : ConnectorType
                {method} + getId() : int 
                {method} + getRotation() : ComponentRotation 
                {method} + showComponent(ClientComponentVisitor) : void
            }
            
            ClientComponent ^.. ClientBatteryComponentDecorator
            ClientBaseComponent <-- ClientBatteryComponentDecorator:base
            class ClientBatteryComponentDecorator {
                {field} - [final] base : ClientComponent
                {field} - [final] batteries : int
                {method} + getBase() : ClientComponent
                {method} + getBatteries() : int
                {method} + showComponent(ClientComponentVisitor) : void
            }

            ClientComponent ^.. ClientCrewComponentDecorator
            ClientBaseComponent <-- ClientCrewComponentDecorator:base
            class ClientCabinComponentDecorator {
                {field} - [final] base : ClientComponent
                {field} - [final] type : AlienType 
                {field} - [final] crew : int
                {field} - [final] base : ClientComponent
                {method} + getBase() : ClientComponent
                {method} + getAlienType() : AlienType
                {method} + getCrew() : int
                {method} + showComponent(ClientComponentVisitor) : void
            }

            ClientComponent ^.. ClientCannonComponentDecorator
            ClientBaseComponent <-- ClientCannonComponentDecorator:base
            class ClientCannonComponentDecorator {
                {field} - [final] rotation : ComponentRotation
                {field} - [final] base : ClientComponent
                {method} + getBase() : ClientComponent
                {method} + getRotation() : ComponentRotation
                {method} + showComponent(ClientComponentVisitor) : void
            }

            ClientComponent^..ClientEmptyComponent
            class ClientEmptyComponent {
                {method} + showComponent(ClientComponentVisitor) : void
            }


            ClientComponent ^.. ClientEngineComponentDecorator
            ClientBaseComponent <-- ClientEngineComponentDecorator:base
            class ClientEngineComponentDecorator {
                {field} - [final] base : ClientComponent
                {field} - [final] rotation : ComponentRotation
                {method} + getBase() : ClientComponent
                {method} + getRotation() : ComponentRotation
                {method} + showComponent(ClientComponentVisitor) : void
            }


            ClientComponent ^.. ClientLifeSupportComponentDecorator
            ClientBaseComponent <-- ClientLifeSupportComponentDecorator:base
            class ClientLifeSupportComponentDecorator {
                {field} - [final] base : ClientComponent
                {field} - [final] type : AlienType
                {method} + getBase() : ClientComponent
                {method} + getAlienType() : AlienType
                {method} + showComponent(ClientComponentVisitor) : void
            }

            ClientComponent ^.. ClientPoweredComponentDecorator 
            ClientBaseComponent <-- ClientPoweredComponentDecorator:base
            class ClientPoweredComponentDecorator {
                {field} - [final] powered : boolean
                {field} - [final] base : ClientComponent
                {method} + getBase() : ClientComponent
                {method} + getPowered() : boolean
                {method} + showComponent(ClientComponentVisitor) : void
            }

            class ClientShieldComponentDecorator {
                {field} - [final] base : ClientComponent
                {field} - [final] type : ShieldType
                {method} + getBase() : ClientComponent
                {method} + getType() : ShieldType
                {method} + showComponent(ClientComponentVisitor) : void
            }

            ClientComponent ^.. ClientShipmentComponentDecorator
            ClientBaseComponent <-- ClientShipmentComponentDecorator:base
            class ClientShipmentsComponentDecorator {
                {field} - [final] shipments : int[]
                {field} - [final] base : ClientComponent
                {method} + getBase() : ClientComponent
                {method} + getShipments() : int[]
                {method} + showComponent(ClientComponentVisitor) : void
            }

            ClientComponent ^.. ClientBrokenVerifyComponentDecorator
            ClientBaseComponent <-- ClientBrokenVerifyComponentDecorator:base
            class ClientBrokenVerifyComponentDecorator {
                {field} - [final] base : ClientComponent
                {method} + getBase() : ClientComponent
                {method} + showComponent(ClientComponentVisitor) : void
            }

            class ClientSpaceShip {
                {field} - [final] type : GameModeType 
                {field} - [final] ship : ClientComponent[][] 
                {field} - [final] boolean[] shielded;
                {field} - [final] cannon_power : int
                {field} - [final] engine_power : int
                {field} - [final] containers : int[]
                {field} - [final] crew : int[]
                {method} + getVerifyShip(VerifyResult[][]) : ClientSpaceShip
                {method} + getType() : GameModeType
                {method} + getComponent(ShipCoords) : ClientComponent
                {method} + getShielded() : boolean[]
                {method} + getCannonPower() : int
                {method} + getEnginePower() : int
                {method} + getEnergyPower() : int
                {method} + getCrew() : int[]
            }

        }

        package Player {

            class ClientWaitingPlayer {
                {field} - [final] username : String
                {field} - [final] color : PlayerColor
                {method} + getUsername() : String
                {method} + getColor() : PlayerColor
            }
            
            ClientSpaceShip <-- ClientConstructionPlayer:ship
            class ClientConstructionPlayer {
                {field} - [final] username : String
                {field} - [final] color : PlayerColor
                {field} - [final] ship : ClientSpaceShip
                {field} - [final] reserved_components : ArrayList<Integer>
                {field} - [final] boolean : finished
                {field} - [final] current_component : int
                {method} + getUsername() : String
                {method} + getColor() : PlayerColor
                {method} + getShip() : ClientSpaceShip
                {method} + getReserved() : List<Integer> 
                {method} + isFinished() : boolean
                {method} + getCurrent() : int
            }

            ClientSpaceShip <-- ClientVerifyPlayer:ship
            class ClientVerifyPlayer {
                {field} - [final] username : String
                {field} - [final] color : PlayerColor
                {field} - [final] ship : ClientSpaceShip
                {field} - [final] finished : boolean
                {field} - [final] order : int
                {method} + getUsername() : String
                {method} + getColor() : PlayerColor
                {method} + getShip() : ClientSpaceShip
                {method} + isFinished() : boolean
                {method} + getOrder() : int
            }

            ClientSpaceShip <-- ClientVoyagePlayer:ship
            class ClientVoyagePlayer {
                {field} - [final] username : String
                {field} - [final] color : PlayerColor
                {field} - [final] ship : ClientSpaceShip
                {field} - [final] planche_slot : int
                {field} - [final] credits : int
                {field} - [final] disconnected : boolean
                {field} - [final] retired_lost : boolean
                {method} + getVerifyShip(VerifyResult[][]) : ClientSpaceShip
                {method} + getUsername() : String
                {method} + getColor() : PlayerColor
                {method} + getShip() : ClientSpaceShip
                {method} + getPlancheSlot() : int
                {method} + getCredits() : int
                {method} + getDisconnected() : boolean
                {method} + getRetired() : boolean
            }

            class ClientEndgamePlayer {
                {field} - [final] username : String
                {field} - [final] color : PlayerColor
                {field} - [final] planche_slot : int
                {field} - [final] credits : int
                {field} - [final] shipments : int[]
                {method} + getUsername() : String
                {method} + getColor() : PlayerColor
                {method} + getPlanche_slot() : int
                {method} + getCredits() : int
                {method} + getShipments() : int[]
            }

        }

        package State {
            

            interface ClientState <<interface>> {
                {method} + sendToView(ClientView) : void
            }

            interface ClientStateVisitor <<interface>> {
                {method} + show(ClientLobbySelectState) : void
                {method} + show(ClientSetupState) : void
                {method} + show(ClientWaitingRoomState) : void
                {method} + show(ClientConstructionState) : void
                {method} + show(ClientVerifyState) : void
                {method} + show(ClientVoyageState) : void
                {method} + show(ClientEndgameState) : void
            }

            ClientState ^.. ClientSetupState
            class ClientSetupState {
                {field} - [final] setupper_name : String
                {field} - [final] unfinished_games : ArrayList<ClientGameListEntry>
                {method} + getSetupperName() : String
                {method} + getUnfinishedList() : ArrayList<ClientGameListEntry>
                {method} + sendToView(ClientView) : void
            }

            ClientState ^.. ClientLobbySelectState
            class ClientLobbySelectState {
                {field} - [final] unfinished_games : ArrayList<ClientGameListEntry>
                {method} + getLobbyList() : ArrayList<ClientGameListEntry>
                {method} + sendToView(ClientView) : void
            }

            ClientState ^.. ClientWaitingRoomState
            class ClientWaitingRoomState {
                {field} - [final] type : GameModeType
                {field} - [final] count : PlayerCount
                {field} - [final] playerlist : ArrayList<ClientWaitingPlayer>
                {method} + getType() : GameModeType
                {method} + getCount() : PlayerCount
                {method} + getPlayerList() : List<ClientWaitingPlayer>
                {method} + sendToView(ClientView) : void 
            }

            ClientState ^.. ClientConstructionState
            class ClientConstructionState {
                {field} - [final] type : GameModeType
                {field} - [final] playerlist : ArrayList<ClientConstructionPlayer>
                {field} - [final] construction_cards : ArrayList<Integer>
                {field} - [final] discarded_tiles : ArrayList<Integer>
                {field} - [final] tiles_left : int
                {field} - [final] toggles_total : int
                {field} - [final] toggles_left : int
                {field} - [final] hourglass_duration : Duration
                {field} - [final] last_hourglass_toggle : Instant 
                {method} + getType() : GameModeType
                {method} + getPlayerList() : List<ClientConstructionPlayer> 
                {method} + getConstructionCards() : List<Integer> 
                {method} + getDiscardedTiles() : List<Integer> 
                {method} + getTilesLeft() : int
                {method} + getTogglesTotal() : int
                {method} + getTogglesLeft() : int
                {method} + getHourglassDuration() : Duration
                {method} + getLastToggle() : Instant
                {method} + sendToView(ClientView) : void 
            }

            ClientState ^.. ClientVerifyState
            class ClientVerifyState {
                {field} - [final] players : ArrayList<ClientVerifyPlayer>
                {method} + getPlayers() : ArrayList<ClientVerifyPlayer>
                {method} + sendToView(ClientView) : void  
            }

            ClientState ^.. ClientVoyageState
            class ClientVoyageState {
                {field} - [final] type : GameModeType
                {field} - [final] playerlist : ArrayList<ClientVoyagePlayer>
                {field} - [final] card_state : ClientCardState 
                {method} + getType() : GameModeType
                {method} + getPlayerList() : ArrayList<ClientVoyagePlayer>
                {method} + getCardState() : ClientCardState 
                {method} + sendToView(ClientView) : void 
            }

            ClientState ^.. ClientEndgameState
            class ClientEndgameState {
                {field} - [final] playerlist : ArrayList<ClientEndgamePlayer>
                {method} + getPlayerList() : List<ClientEndgamePlayer>
                {method} + sendToView(ClientView) : void 
            }

        }

        class ClientGameListEntry {
            {field} - [final] players : ArrayList<String>
            {field} - [final] model_id : int
            {field} - [final] type : GameModeType
            {field} - [final] count : PlayerCount
            {field} - [final] state : String
            {method} + getType() : GameModeType
            {method} + getCount() : PlayerCount
            {method} + getPlayers() : ArrayList<String>
            {method} + getModelId() : int
            {method} + getState() : String
        }

    }
 
}

package Controller {

    package Client {

        package Connections {

            enum ConnectionType <<enum>> {
                SOCKET
                RMI
                NONE
            }

            interface ServerConnection <<interface>> {
                {method} sendMessage(ServerMessage) : void
                {method} close() : void
                {method} getShutdownHook() : Thread
            }

            ServerConnection ^.. SocketConnection
            class SocketConnection {
                {field} - [final] inqueue : ThreadSafeMessageQueue<ClientMessage)
                {field} - [final] socket : Socket
                {field} - [final] out : ObjectOutputStream
                {field} - [final] in : ObjectInputStream
                {method} + run() : void
                {method} + sendMessage(ServerMessage) : void
                {method} + close() : void
                {method} + getShutdownHook() : Thread
            }

            ServerConnection ^.. RMIConnection
            RMIClientStub -d- RMIConnection:stub

            class RMIConnection {
                {field} - [final] stub : RMIClientStub
                {field} - [final] server : VirtualServer
                {method} + sendMessage(ServerMessage) : void
                {method} + close() : void
                {method} + getShutdownHook() : Thread
            }

            class RMIClientStub {
                {field} - [transient] [final] inqueue : ThreadSafeMessageQueue<ClientMessage>
                {field} - [final] username : String
                {method} + sendMessage(ServerMessage) : void
                {method} + close() : void
                {method} + getUsername() : String
            }

        }

        package State {
            
            Controller::Client::ClientController "1" -- ClientControllerState:controller
            abstract ClientControllerState <<abstract>> {
                {field} - [protected] controller : ClientController
                {field} - [protected] view : ClientView
                {method} + [abstract] init() : void
                {method} + [abstract] getNext() : ClientControllerState
                {method} # transition() : void
                {method} # getView() : ClientView
                {method} + onClose() : void
            }

            ClientControllerState ^.. ConnectedState
            Controller::Client::Connections::ServerConnection "1" -r- ConnectedState:connection
            class ConnectedState {
                {field} - [final] connection : ServerConnection
                {field} - [final] outqueue : ThreadSafeMessageQueue<ServerMessage>
                {field} - [final] username : String
                {field} - [final] consumer_thread : Thread
                {field} - [final] sender_thread : Thread
                {field} - [final] shutdown_hook : Thread
                {field} - [final] pingtimer : Timer
                {method} + init() : void
                {method} + getNext() : ClientControllerState
                {method} + onClose() : void
                {method} + sendMessage(ServerMessage) : void
                {method} + disconnect() : void
                {method} + getView() : ClientView
                {method} + getUsername() : String
                {method} + showTextMessage(String) : void
                {method} - startPingTask() : void
                {method} - stopPingTask() : void
                {method} - getPingTask() : TimerTask
                {method} - ping() : void
                {method} - getShutdownHook() : Thread
            }

            ClientControllerState ^.. ConnectingState
            Controller::Client::Connections::ServerConnection "1" -- ConnectingState:connection
            class ConnectingState {
                {field} - connection : ServerConnection
                {field} - [final] username : String
                {field} - [final] inqueue : ThreadSafeMessageQueue<ClientMessage>
                {method} + init() : void
                {method} + getController() : ClientController
                {method} + getNext() : ClientControllerState
                {method} + connect(String, int, ConnectionType) : void
            }

            ClientControllerState ^.. TitleScreenState
            class TitleScreenState {
                {field} - username : String
                {method} + init() : void
                {method} + getNext() : ClientControllerState
                {method} + setUsername(String) : void
                {method} + exit() : void
                {method} + validateUsername(String) : boolean
            }
        
        }

        Controller::Client::State::ClientControllerState "1" -- ClientController:state
        class ClientController {
            {field} - [final] view : ClientView
            {field} - state : ClientControllerState
            {field} - [final] closed : boolean
            {method} + getState() : ClientControllerState
            {method} + setState(ClientControllerState) : void
            {method} + close() : void
            {method} + getClosed() : boolean
            {method} + reset() : void
        }

        Controller::Client::State::ConnectedState "1" -- ConsumerThread:state
        class ConsumerThread {
            {field} - [final] state : ConnectedState
            {field} - [final] inqueue : ThreadSafeMessageQueue<ClientMessage>
            {method} + run() : void
        }

        Controller::Client::Connections::ServerConnection "1" -- SenderThread:connection
        Controller::Client::State::ConnectedState "1" -- SenderThread:state
        class SenderThread {
            {field} - [final] connection : ServerConnection
            {field} - [final] state : ConnectedState
            {field} - [final] outqueue : ThreadSafeMessageQueue<ClientMessage>
            {method} + run() : void
        }

    }

    package Server{

        package Connections {

            interface ClientConnection <<interface>> {
                {method} sendMessage(ClientMessage) : void
                {method} close() : void
            }

            RMIClientConnection .. RMIClientStub
            interface RMIClientConnection <<interface>> {
                {method} getUsername() : String
            }

            interface VirtualServer <<interface>> {
                {method} receiveMessage(ServerMessage) : void
            }

            interface VirtualServerProvider <<interface>> {
                {method} accept(RMIClientConnection) : VirtualServer
            }

            VirtualServerProvider ^.. NetworkServer
            class NetworkServer {
                {field} - [final] serverPool : ExecutorService
                {field} - ip : String
                {field} - tcpport : int
                {field} - rmiport : int
                {field} - init : boolean
                {field} - server : ServerSocket
                {method} + init(String, int, int) : void
                {method} + init(String, int) : void
                {method} - startServer() : void
                {method} + run() : void
                {method} - RMICleanup() : Thread
                {method} - TCPCleanup() : Thread
                {method} + accept(RMIClientConnection) : VirtualServer
            }

            VirtualServer ^.. RMIServerStubImpl
            Controller::Server::MainServerController "1" -- RMIServerStubImpl:controller
            Controller::Server::ClientDescriptor "1" -- RMIServerStubImpl:client
            class RMIServerStubImpl {
                {field} - [transient] [final] controller : MainServerController
                {field} - [transient] [final] client : ClientDescriptor
                {method} + receiveMessage(ServerMessage) : void
            }

            ClientConnection ^.. SocketClient
            class SocketClient {
                {field} - [final] socket : Socket
                {field} - [final] out : ObjectOutputStream
                {field} - [final] in : ObjectInputStream
                {field} - setup_timeout : TimerTask
                {field} - username : String
                {method} + setTimeout(TimerTask) : void
                {method} + cancelTimeout() : void
                {method} + getSocket() : Socket
                {method} + run() : void
                {method} + sendMessage(ClientMessage) : void
                {method} + readSetup() : void
                {method} + read() : void
                {method} + close() : void
            }

        }


        Controller::Server::MainServerController "static" ----d---- MainServerController:instance
        Controller::Server::Connections::NetworkServer "1" -- MainServerController:server
        class MainServerController <<singleton>> {
            {field} - [final] server : NetworkServer
            {field} - [final] all_listeners : HashMap<String, ClientDescriptor>
            {field} - [final] lob_listeners : HashMap<String, ClientDescriptor>
            {field} - [final] stp_listeners : HashMap<String, ClientDescriptor>
            {field} - [final] disconnected : HashMap<String, Integer>
            {field} - [final] to_setup_tcp : List<SocketClient> 
            {field} - [final] listeners_lock : Object 
            {field} - [final] queue : ThreadSafeMessageQueue<ServerMessage> 
            {field} - [final] lobbies_lock : Object 
            {field} - [final] saved_lock : Object 
            {field} - [final] lobbies : HashMap<Integer, LobbyController> 
            {field} - [final] saved : HashMap<Integer, ModelInstance>
            {field} - init : boolean
            {field} - next_id : int
            {method} + [static] getInstance() : MainServerController
            {method} + [static] reset() : void
            {method} + init(String, int, int) : void
            {method} + run() : void
            {method} + receiveMessage(ServerMessage) : void
            {method} + broadcast(ClientMessage) : void
            {method} + sendMessage(ClientDescriptor, ClientMessage) : void
            {method} + getDescriptor(String) : ClientDescriptor
            {method} + connectListener(SocketClient) : void
            {method} + setupSocketListener(SocketClient, String) : void
            {method} + connectListener(RMIClientConnection) : ClientDescriptor 
            {method} + getStub(ClientDescriptor) : VirtualServer
            {method} - validateUsername(String) : boolean 
            {method} + connect(ClientDescriptor) : void
            {method} + disconnect(ClientDescriptor) : void
            {method} + addDisconnected(String, int) : void
            {method} + removeDisconnected(String) : void
            {method} + ping(ClientDescriptor) : void
            {method} - TCPTimeoutTask(MainServerController, SocketClient) : TimerTask
            {method} - timeoutTask(MainServerController, ClientDescriptor) : TimerTask
            {method} + getNext() : int
            {method} + updateUnfinishedList() : void
            {method} + enterSetup(ClientDescriptor) : void
            {method} + leaveSetup(ClientDescriptor) : void
            {method} + openNewRoom(ClientDescriptor, GameModeType, PlayerCount) : void
            {method} + openUnfinished(ClientDescriptor, int) : void
            {method} + lobbyCloseCleanup(int) : void
            {method} + connectToLobby(ClientDescriptor, int) : void
            {method} + notifyLobbyListeners() : void
            {method} + joinFromClosedLobby(ClientDescriptor) : void
        }

        Model::ModelInstance "1" ----u---- LobbyController:model
        class LobbyController {
            {field} - [final] id : int
            {field} - [final] listeners : HashMap<String, ClientDescriptor>
            {field} - [final] disconnected_usernames : HashMap<String, Player>
            {field} - [final] listeners_lock : Object
            {field} - [final] queue : ThreadSafeMessageQueue<ServerMessage> 
            {field} - [final] serializer_path : String
            {field} - [final] model_lock : Object
            {field} - dsctimer : Timer
            {field} - model : ModelInstance
            {method} + getID() : int
            {method} + run() : void
            {method} + receiveMessage(ServerMessage)  : void
            {method} + broadcast(ClientMessage) : void
            {method} + sendMessage(ClientDescriptor, ClientMessage) : void
            {method} + getModel() : ModelInstance
            {method} + setModel(ModelInstance) : void
            {method} + serializeCurrentGame() : void
            {method} + endGame() : void
            {method} - getEndMatchTask(LobbyController) : TimerTask
            {method} + connect(ClientDescriptor) : void
            {method} + disconnect(ClientDescriptor)  : void
            {method} + disconnectProcedure(ClientDescriptor) : void
            {method} + getClientInfo() : ClientGameListEntry
            {method} + ping(ClientDescriptor) : void
        }

        class ClientDescriptor {
            {field} - [static] [final] TIMEOUT_DURATION : long
            {field} - [final] username : String
            {field} - [transient] [final] timer : Timer
            {field} - [transient] [final] connection : ClientConnection
            {field} - [transient] lobby_id : int
            {field} - [transient] task : TimerTask
            {field} - [transient] player : Player
            {method} + bindPlayer(Player) : void
            {method} + unbindPlayer() : void
            {method} + sendMessage(ClientMessage) : void
            {method} + getUsername() : String
            {method} + getID() : int
            {method} + setID(int) : void
            {method} + getPlayer() : Player
            {method} + getPingTimerTask() : TimerTask
            {method} + setPingTimerTask(TimerTask) : void
            {method} + getConnection() : ClientConnection
        }

    }

    class ThreadSafeMessageQueue<T> {
        {field} - [final] threadpool : ExecutorService
        {field} - [final] queue : ArrayBlockingQueue<T>
        {method} + take() : T
        {method} + insert(T) : void
    }

}

package Message {

    interface Message <<interface, serializable>>

    Message ^-d- ServerMessage::ServerMessage
    package ServerMessage{
        abstract ServerMessage <<abstract>> {
            {field} # [transient] descriptor : ClientDescriptor
            {method} + getDescriptor() : ClientDescriptor
            {method} + setDescriptor(ClientDescriptor) : void
            {method} + [abstract] receive(MainServerController) : void
            {method} + receive(LobbyController) : void
            {method} + receive(ModelInstance) : void
            {method} + receive(GameState) : void
            {method} + receive(CardState) : void
        }

        ServerMessage ^.l. DiscardCargoMessage
        class DiscardCargoMessage {
            {field} - [final] coords : ShipCoords
            {field} - [final] type : ShipmentType
            {method} + receive(MainServerController) : void
            {method} + receive(LobbyController) : void
            {method} + receive(ModelInstance) : void
            {method} + receive(GameState) : void
            {method} + receive(CardState) : void
        }

        ServerMessage ^... EnterLobbyMessage
        class EnterLobbyMessage {
            {field} - [final] id : int
            {method} + receive(MainServerController) : void
        }

        ServerMessage ^.. EnterSetupMessage
        class EnterSetupMessage {
            {method} + receive(MainServerController) : void
        }

        ServerMessage ^.r. LeaveSetupMessage
        class LeaveSetupMessage {
            {method} + receive(MainServerController) : void
        }

        ServerMessage ^... MoveCargoMessage
        class MoveCargoMessage {
            {field} - [final] target : ShipCoords
            {field} - [final] source : ShipCoords
            {field} - [final] type : ShipmentType
            {method} + receive(MainServerController) : void
            {method} + receive(LobbyController) : void
            {method} + receive(ModelInstance) : void
            {method} + receive(GameState) : void
            {method} + receive(CardState) : void
        }

        ServerMessage ^.. OpenLobbyMessage
        class OpenLobbyMessage {
            {field} - [final] count : PlayerCount
            {field} - [final] type : GameModeType
            {method} + receive(MainServerController) : void
        }

        ServerMessage ^.l. OpenUnfinishedMessage
        class OpenUnfinishedMessage {
            {field} - [final] id : int
            {method} + receive(MainServerController) : void
        }

        ServerMessage ^... PlayerGiveUpMessage
        class PlayerGiveUpMessage {
            {method} + receive(MainServerController) : void
            {method} + receive(LobbyController) : void
            {method} + receive(ModelInstance) : void
            {method} + receive(GameState) : void
        }

        ServerMessage ^.. PutComponentMessage
        class PutComponentMessage {
            {field} - [final] id : int
            {field} - [final] coords : ShipCoords
            {field} - [final] rotation : ComponentRotation
            {method} + receive(MainServerController) : void
            {method} + receive(LobbyController) : void
            {method} + receive(ModelInstance) : void
            {method} + receive(GameState) : void
        }

        ServerMessage ^.r. RemoveComponentMessage
        class RemoveComponentMessage {
            {field} - [final] coords : ShipCoords
            {method} + receive(MainServerController) : void
            {method} + receive(LobbyController) : void
            {method} + receive(ModelInstance) : void
            {method} + receive(GameState) : void
        }

        ServerMessage ^... SelectBlobMessage
        class SelectBlobMessage {
            {field} - [final] blob_coords : ShipCoords
            {method} + receive(MainServerController) : void
            {method} + receive(LobbyController) : void
            {method} + receive(ModelInstance) : void
            {method} + receive(GameState) : void
            {method} + receive(CardState) : void
        }

        ServerMessage ^.. SendContinueMessage
        class SendContinueMessage {
            {method} + receive(MainServerController) : void
            {method} + receive(LobbyController) : void
            {method} + receive(ModelInstance) : void
            {method} + receive(GameState) : void
            {method} + receive(CardState) : void
        }

        ServerMessage ^.l. DiscardComponentMessage
        class DiscardComponentMessage{
            {method} + receive(MainServerController) : void
            {method} + receive(LobbyController) : void
            {method} + receive(ModelInstance) : void
            {method} + receive(GameState) : void
        }

        ServerMessage ^... ToggleHourglassMessage
        class ToggleHourglassMessage{
            {method} + receive(MainServerController) : void
            {method} + receive(LobbyController) : void
            {method} + receive(ModelInstance) : void
            {method} + receive(GameState) : void
        }

        ServerMessage ^.. ServerConnectMessage
        class ServerConnectMessage {
            {method} + receive(MainServerController) : void
            {method} + receive(LobbyController) : void
            {method} + receive(ModelInstance) : void
            {method} + receive(GameState) : void
        }

        ServerMessage ^.r. ServerDisconnectMessage
        class ServerDisconnectMessage {
            {method} + receive(MainServerController) : void
            {method} + receive(LobbyController) : void
            {method} + receive(ModelInstance) : void
            {method} + receive(GameState) : void
            {method} + receive(CardState) : void
        }

        ServerMessage ^... TakeComponentMessage
        class TakeComponentMessage {
            {method} + receive(MainServerController) : void
            {method} + receive(LobbyController) : void
            {method} + receive(ModelInstance) : void
            {method} + receive(GameState) : void
        }

        ServerMessage ^.. SetCrewMessage
        class SetCrewMessage{
            {field} - [final] coords : ShipCoords
            {field} - [final] type : AlienType
            {method} + receive(MainServerController) : void
            {method} + receive(LobbyController) : void
            {method} + receive(ModelInstance) : void
            {method} + receive(GameState) : void
        }

        ServerMessage ^.l. TakeDiscardedComponentMessage
        class TakeDiscardedComponentMessage {
            {field} - [final] id : int
            {method} + receive(MainServerController) : void
            {method} + receive(LobbyController) : void
            {method} + receive(ModelInstance) : void
            {method} + receive(GameState) : void
        }

        ServerMessage ^... TurnOnMessage
        class TurnOnMessage{
            {field} - [final] target : ShipCoords
            {field} - [final] battery : ShipCoords
            {method} + receive(MainServerController) : void
            {method} + receive(LobbyController) : void
            {method} + receive(ModelInstance) : void
            {method} + receive(GameState) : void
            {method} + receive(CardState) : void
        }
        
        ServerMessage ^.. RemoveCrewMessage
        class RemoveCrewMessage{
            {field} - [final] coords : ShipCoords
            {method} + receive(MainServerController) : void
            {method} + receive(LobbyController) : void
            {method} + receive(ModelInstance) : void
            {method} + receive(GameState) : void
            {method} + receive(CardState) : void
        }

        ServerMessage ^.r. TakeRewardMessage
        class TakeRewardMessage {
            {field} - [final] took : boolean
            {method} + receive(MainServerController) : void
            {method} + receive(LobbyController) : void
            {method} + receive(ModelInstance) : void
            {method} + receive(GameState) : void
            {method} + receive(CardState) : void
        }

        ServerMessage ^... TakeCargoMessage
        class TakeCargoMessage{
            {field} - [final] coords : ShipCoords
            {field} - [final] type : ShipmentType
            {method} + receive(MainServerController) : void
            {method} + receive(LobbyController) : void
            {method} + receive(ModelInstance) : void
            {method} + receive(GameState) : void
            {method} + receive(CardState) : void
        }

        ServerMessage ^.. SelectLandingMessage
        class SelectLandingMessage {
            {field} - [final] id : int
            {method} + receive(MainServerController) : void
            {method} + receive(LobbyController) : void
            {method} + receive(ModelInstance) : void
            {method} + receive(GameState) : void
            {method} + receive(CardState) : void
        }

        ServerMessage ^.l. UsernameSetupMessage
        class UsernameSetupMessage {
            {field} - [final] username : String
            {method} + receive(MainServerController) : void
            {method} + getUsername() : String
        }

        ServerMessage ^... PingMessage
        class PingMessage{
            {method} + receive(MainServerController) : void
            {method} + receive(LobbyController) : void
        }

        ServerMessage ^.. ReserveComponentMessage
        class ReserveComponentMessage {
            {method} + receive(MainServerController) : void
            {method} + receive(LobbyController) : void
            {method} + receive(ModelInstance) : void
            {method} + receive(GameState) : void
        }

    }

    Message ^-- ClientMessage::ClientMessage
    package ClientMessage {

        abstract ClientMessage <<abstract>> {
            {method} + [abstract] receive(ConnectedState) : void
        }

        ClientMessage ^.r. ClientDisconnectMessage
        class ClientDisconnectMessage {
            {method} + receive(ConnectedState) : void
        }

        ClientMessage ^.. NotifyStateUpdateMessage
        ClientState --l-- NotifyStateUpdateMessage:state
        class NotifyStateUpdateMessage {
            {field} - [final] state : ClientState
            {method} + receive(ConnectedState) : void
        }

        ClientMessage ^.. ViewMessage
        class ViewMessage{
            {field} - [final] message : String
            {method} + receive(ConnectedState) : void
        }

    }
    
}

package View {

    enum ViewType <<enum>> {
        TUI
        GUI
    }

    Model::Client::ClientStateVisitor <--u-- ClientView
    interface ClientView <<interface>> {
        {method} + show(TitleScreenState) : void
	    {method} + show(ConnectingState) : void
	    {method} + showTextMessage(String) : void
	    {method} + setClientState(ClientState) : void
	    {method} + connect(ConnectedState) : void
	    {method} + disconnect() : void
    }

    package GUI {

        ClientView <-d- GUIView
        class GUIView {
            {field} - root : StackPane
            {field} - gameroot : StackPane
            {field} - bgroot : StackPane
            {field} - notifroot : StackPane
            {field} - bg_type : int
            {field} - client_state : ClientState
            {field} - prev_client_state : ClientState
            {field} - state : ConnectedState
            {field} - view_color : PlayerColor
            {field} - username : String
            {field} - notif_box : VBox
            {method} + start(Stage) : void
            {method} + sendMessage(ServerMessage) : void
            {method} + show(TitleScreenState) : void
            {method} + show(ConnectingState) : void
            {method} + show(ClientLobbySelectState) : void
            {method} + show(ClientSetupState) : void
            {method} + show(ClientWaitingRoomState) : void
            {method} + show(ClientConstructionState) : void
            {method} + show(ClientVerifyState) : void
            {method} + show(ClientVoyageState) : void
            {method} + show(ClientEndgameState) : void
            {method} + showTextMessage(String) : void
            {method} + setClientState(ClientState) : void
            {method} + connect(ConnectedState) : void
            {method} + disconnect() : void
            {method} + selectColor(PlayerColor) : void
            {method} + getUsername() : String
            {method} + bgAnimation(int) : void
        }
        
        class SetupOptionContainer {
            {field} - count : PlayerCount
            {field} - mode : GameModeType
            {field} - count_button : Node
            {field} - mode_button : Node
            {method} + sendSetup(GUIView) : void
            {method} + getCount() : PlayerCount
            {method} + setCount(PlayerCount, Node) : void
            {method} + getMode() : GameModeType
            {method} + setMode(GameModeType, Node) : void
            {method} + getCountButton() : Node
            {method} + getModeButton() : Node
        }

        class GUINotification {
            {field} - [final] seconds : int
            {method} + seconds() : int
        }

        package Factories {

            class ConnectionSetupTreeFactory {
                {method} + [static] createConnectionScreen(ConnectingState) : Node
                {method} + [static] handleConnection(ConnectingState, TextField, TeftField, ConnectionType) : void
            }

            class ConstructionSidePaneTreeFactory {
                {method} - [static] toggleHourglass(GUIView) : void
                {method} + [static] showCards(ClientConstructionState, Node) : void
                {method} + [static] updateHourglassAnimation(ClientConstructionState, Button) : void
                {method} + [static] createSidePane(GUIView, ClientConstructionState, PlayerColor, Node) : Node
                {method} + [static] createAwaitingList(ClientConstructionState) : Node
                {method} + [static] createMainConstructionTileTree(GUIView, ClientConstructionState, int) : Node
                {method} + [static] createReservedConstructionTileTree(GUIView, ClientConstructionState) : Node
                {method} + [static] createDiscardedConstructionTileTree(GUIView, ClientConstructionState) : Node
                {method} + [static] createLevelTwoAddons(GUIView, ClientConstructionState, Node) : Node
                {method} + [static] createColorSwitchTree(GUIView, ClientConstructionState, PlayerColor) : Node
            }

            class EndgameTreeFactory {
                {method} + [static] createEnding(GUIView, ClientEndgameState) : Node
                {method} + [static] getEntry(ClientEndgamePlayer) : Node
                {method} + [static] awaiting(ClientEndgameState) : Node
            }

            class LobbyStateTreeFactory {
                {method} + [static] createLobbyScreen(ClientLobbySelectState, GUIView) : Node
                {method} + [static] getEntry(int, GameModeType, List<String>, GUIView) : StackPane
            }

            class PlacedShipTreeFactory {
                {method} + [static] createPlacedShip(GUIView, String, ClientSpaceShip, int, boolean, boolean) : Node
                {method} + [static] statsBar(String, ClientSpaceShip, int, boolean, boolean) : Node
                {method} + [static] voyageShipPlanche(GUIView, ClientVoyageState, PlayerColor) : Node
                {method} + [static] planche(ClientVoyageState) : Node
            }

            class SetupTreeFactory {
                {method} + [static] createSetupScreen(ClientSetupState, GUIView) : Node
                {method} + [static] createButton(SetupOptionContainer, PlayerCount) : Node
                {method} + [static] createButton(SetupOptionContainer, GameModeType) : Node
                {method} + [static] confirmButton(GUIView, SetupOptionContainer) : Node
                {method} + [static] leaveButton(GUIView) : Node
                {method} + [static] createSavedList(ClientSetupState, GUIView) : Node
                {method} + [static] getEntry(int, GameModeType, String, List<String>, GUIView) : StackPane
            }

            class TitleScreenStateFactory {
                {method} + [static] createTitleScreen(TitleScreenState) : Node
            }

            class VerifySidePaneTreeFactory {
                {method} + [static] createSidePane(GUIView, ClientVerifyState, PlayerColor) : Node
                {method} + [static] createAwaitingTree(ClientVerifyState) : Node
                {method} + [static] createColorSwitchTree(GUIView, ClientVerifyState, PlayerColor) : Node
            }

            Model::Client::Card::ClientCardStateVisitor <-- VoyageSidePaneTreeFactory
            class VoyageSidePaneTreeFactory {
                {field} - cstatetree : VBox
                {field} - [final] view : GUIView
                {method} + createSidePane(ClientVoyageState, PlayerColor) : Node
                {method} + show(ClientAwaitConfirmCardStateDecorator) : void
                {method} + show(ClientBaseCardState) : void
                {method} + show(ClientCargoPenaltyCardStateDecorator) : void
                {method} + show(ClientCargoRewardCardStateDecorator) : void
                {method} + show(ClientCombatZoneIndexCardStateDecorator) : void
                {method} + show(ClientCreditsRewardCardStateDecorator) : void
                {method} + show(ClientCrewPenaltyCardStateDecorator) : void
                {method} + show(ClientLandingCardStateDecorator) : void
                {method} + show(ClientMeteoriteCardStateDecorator) : void
                {method} + show(ClientNewCenterCardStateDecorator) : void
                {method} + show(ClientProjectileCardStateDecorator) : void
                {method} + show(ClientEnemyCardStateDecorator) : void
                {method} - normalizeOffset(int, int) : void
                {method} + createColorSwitchTree(GUIView, ClientVoyageState, PlayerColor) : Node
            }

            class WaitingTreeFactory {
                {method} + [static] createWaitingScreen(ClientWaitingRoomState, GUIView) : Node
                {method} + [static] getWaitingPlayer(ClientWaitingPlayer) : Node
                {method} + [static] getColor(PlayerColor) : Color
                {method} + [static] getGameModeSplash(GameModeType) : StackPane
            }

        }

        package Tiles {

            package Piece {

                abstract DraggablePiece <<abstract>> {
                    {method} + [abstract] getDecoded(DraggablePieceDecoder) : ServerMessage
                }

                DraggablePiece <-- BatteryPiece
                class BatteryPiece {
                    {field} - [final] coords : ShipCoords
                    {method} + getCoords() : ShipCoords
                    {method} + getDecoded(DraggablePieceDecoder) : ServerMessage
                }

                DraggablePiece <-- CargoPiece
                class CargoPiece {
                    {field} - [final] type : ShipmentType
                    {field} - [final] coords : ShipCoords
                    {method} + getCoords() : ShipCoords
                    {method} + getType() : ShipmentType
                    {method} + getDecoded(DraggablePieceDecoder) : ServerMessage
                }

                DraggablePiece <-- CrewPiece
                class CrewPiece {
                    {field} - [final] coords : ShipCoords
                    {method} + getDecoded(DraggablePieceDecoder) : ServerMessage
                }

                DraggablePiece <-- CrewSetPiece
                class CrewSetPiece {
                    {field} - [final] type : AlienType
                    {method} + getDecoded(DraggablePieceDecoder) : ServerMessage
                    {method} + getType() : AlienType
                }

                class DraggablePieceDecoder {
                    {field} - [final] ending_coords : ShipCoords
                    {method} + decode(BatteryPiece) : ServerMessage
                    {method} + decode(CargoPiece) : ServerMessage
                    {method} + decode(CrewPiece) : ServerMessage
                    {method} + decode(CrewSetPiece) : ServerMessage
                    {method} + decode(RemoveComponentPiece) : ServerMessage
                    {method} + decode(SelectBlob) : ServerMessage
                }

                class PieceImagePathProvider {
                    {method} + [static] destroy() : String
                    {method} + [static] blob() : String
                    {method} + [static] crew(AlienType) : String
                    {method} + [static] cargo(ShipmentType) : String
                    {method} + [static] battery() : String
                }

                DraggablePiece <-- RemoveComponentPiece
                class RemoveComponentPiece {
                    {method} + getDecoded(DraggablePieceDecoder) : ServerMessage
                }

                DraggablePiece <-- SelectBlobPiece
                class SelectBlobPiece {
                    {method} + getDecoded(DraggablePieceDecoder) : ServerMessage
                }

            }

            class ComponentTile {
                {field} [protected] [final] image : ImageView
                {method} + [final] getImage : ImageView
            }

            ComponentTile <-- ConstructionTile
            class ConstructionTile {
                {field} - [final] ID : Integer
                {field} - rotation : ComponentRotation
                {method} + getRotation() : ComponentRotation
                {method} + getID() : Integer
            }

            ComponentTile <-- PlacedTile
            class PlacedTile {
                {field} - [final] coords : ShipCoords
                {field} - [final] tiles : ArrayList<DraggablePiece>
                {method} + setOverlay(ImageView) : void
                {method} + addToList(DraggablePiece) : void
                {method} + getCoords() : ShipCoords
            }

            Model::Client::Components::ClientComponentVisitor <--PlacedTileFactory
            class PlacedTileFactory {
                {field} - [final] view : GUIView
                {field} - tile : PlacedTile
                {field} - center : ShipCoords
                {method} + createTile(ShipCoords, ClientComponent) : PlacedTile
                {method} + show(ClientBaseComponent) : void
                {method} + show(ClientEmptyComponent) : void
                {method} + show(ClientBatteryComponentDecorator) : void
                {method} + show(ClientBrokenVerifyComponentDecorator) : void
                {method} + show(ClientCabinComponentDecorator) : void
                {method} + show(ClientPoweredComponentDecorator) : void
                {method} + show(ClientShipmentsComponentDecorator) : void
            } 

        }

    }

    package TUI {

        package Concurrent {
            
            View::TUI::TerminalWrapper "1" -- KeyboardInputThread:terminal
            TUIView "1" -- KeyboardInputThread:view
            class KeyboardInputThread {
                {field} - [final] terminal : TerminalWrapper
                {field} - [final] view : TUIView
                {method} + run() : void
            }

            TUIView "1" -- RedrawThread:view
            class RedrawThread {
                {field} - [final] view : TUIView
                {method} + run() : void
            }

        }

        package Formatters {

            Model::Client::Card::ClientCardStateVisitor <--u-- ClientCardStateFormatter
            class ClientCardStateFormatter {
                {field} - [final] line : AttributedStringBuilder
                {method} + getFormatted() : AttributedString
                {method} + show(ClientAwaitConfirmCardStateDecorator) : void
                {method} + show(ClientBaseCardState) : void
                {method} + show(ClientCargoPenaltyCardStateDecorator) : void
                {method} + show(ClientCargoRewardCardStateDecorator) : void
                {method} + show(ClientCombatZoneIndexCardStateDecorator) : void
                {method} + show(ClientCreditsRewardCardStateDecorator) : void
                {method} + show(ClientCrewPenaltyCardStateDecorator) : void
                {method} + show(ClientLandingCardStateDecorator) : void
                {method} + show(ClientMeteoriteCardStateDecorator) : void
                {method} + show(ClientNewCenterCardStateDecorator) : void
                {method} + show(ClientProjectileCardStateDecorator) : void
	            {method} + show(ClientEnemyCardStateDecorator) : void
	            {method} - getColor(PlayerColor) : int
                {method} - normalizeOffset(int, int) : int
            }

            class ClientConstructionStateFormatter { 
                {field} - [static] [final] bottom_line : String
	            {method} + [static] format(TerminalWrapper, ClientConstructionState, PlayerColor) : void
            	{method} + [static] formatStatus(TerminalWrapper, ClientConstructionState) : void
            	{method} - [static] getBoardLine(ClientConstructionState) : AttributedString 
	            {method} - [static] formatTime(Duration) : String 
	            {method} - [static] getColor(PlayerColor) : int 
	            {method} - [static] getUserComponents(ClientConstructionState, PlayerColor) : List<String> 
            	{method} - [static] getDiscardedBoard(ClientConstructionState) List<String> 
        	}

            class ClientEndgameStateFormatter {
                {method} + [static] format(TerminalWrapper, ClientEndgameState) : void
                {method} + [static] formatStatus(TerminalWrapper, ClientEndgameState) : void
                {method} - [static] getColor(PlayerColor)
            }

            class ClientSmallComponentPrinter {
                {field} - character_component : String
                {method} + reset() : void
                {method} + getComponentStringSmall() : String
                {method} + show(ClientBaseComponent) : void
                {method} + show(ClientEmptyComponent) : void
                {method} + show(ClientBatteryComponentDecorator) : void
                {method} + show(ClientBrokenVerifyComponentDecorator) : void
                {method} + show(ClientCabinComponentDecorator) : void
                {method} + show(ClientCannonComponentDecorator) : void
                {method} + show(ClientEngineComponentDecorator) : void
                {method} + show(ClientLifeSupportComponentDecorator) : void
                {method} + show(ClientPoweredComponentDecorator) : void
                {method} + show(ClientShieldComponentDecorator) : void
                {method} + show(ClientShipmentsComponentDecorator) : void
            }

            Model::Client::Components::ClientComponentVisitor <-- ClientLargeComponentPrinter
            class ClientLargeComponentPrinter {
                {field} - [final] component : ArrayList<ArrayList<StringBuffer>>
                {method} + reset() : void
                {method} + getComponentStringsLarge() : List<String>
                {method} + setCenter(String) : void
                {method} + show(ClientBaseComponent) : void
                {method} + show(ClientEmptyComponent) : void
                {method} + show(ClientBatteryComponentDecorator) : void
                {method} + show(ClientBrokenVerifyComponentDecorator) : void
                {method} + show(ClientCabinComponentDecorator) : void
                {method} + show(ClientCannonComponentDecorator) : void 
                {method} + show(ClientEngineComponentDecorator) : void 
                {method} + show(ClientLifeSupportComponentDecorator) : void 
                {method} + show(ClientPoweredComponentDecorator) : void 
                {method} + show(ClientShieldComponentDecorator) : void 
                {method} + show(ClientShipmentsComponentDecorator) : void 
                {method} + getForbidden() : List<String>
                {method} - getConnectorSymbol(ConnectorType, ComponentRotation) : String
            }

            class ClientLobbyStatesFormatter {
                {field} - [static] [final] bottom_line : String
                {method} + [static] format(TerminalWrapper, ClientLobbySelectState) : void
                {method} + [static] formatStatus(TerminalWrapper, ClientLobbySelectState) : void
                {method} + [static] format(TerminalWrapper, ClientSetupState) : void
                {method} + [static] formatStatus(TerminalWrapper, ClientSetupState) : void
            }


            class ClientSpaceShipFormatter {
                {method} - [static] trimName(String, PlayerColor, int) : String
                {method} + [static] formatLarge(ClientSpaceShip, String, PlayerColor, int, boolean, boolean) : List<String> 
                {method} + [static] formatSmall(ClientSpaceShip, String, PlayerColor, int, boolean, boolean) : List<String> 
                {method} + [static] getConstructionHelpCorner() : ArrayList<String>
                {method} + [static] getHelpCorner() : ArrayList<String>
	            {method} + [static] getEmptyShipSmall() : ArrayList<String>
	            {method} + [static] getEmptyShipLarge() : ArrayList<String>
            }

            TUI::TerminalWrapper "1" -- ClientStateOverlayFormatter:terminal
            class ClientStateOverlayFormatter {
                {field} - [final] terminal : TerminalWrapper
                {method} + show(ClientLobbySelectState) : void
                {method} + show(ClientSetupState) : void
                {method} + show(ClientWaitingRoomState) : void
                {method} + show(ClientConstructionState) : void
                {method} + show(ClientVerifyState) : void
                {method} + show(ClientVoyageState) : void 
                {method} + show(ClientEndgameState) : void
            }

            class ClientVerifyStateFormatter {
                {field} - [static] [final] bottom_line : String
                {method} + [static] format(TerminalWrapper, ClientVerifyState, PlayerColor) : void
                {method} + [static] formatStatus(TerminalWrapper, ClientVerifyState) : void
                {method} - [static] getMissingLine(ClientVerifyState) : AttributedString
                {method} - [static] getColor(PlayerColor) : int
            }

            class ClientVoyageStateFormatter {
                {field} - [static] [final] bottom_line : String
	            {method} + [static] format(TerminalWrapper, ClientVoyageState, PlayerColor) : void
	            {method} + [static] formatStatus(TerminalWrapper, ClientVoyageState) : void
	            {method} - [static] printPlanche(ClientVoyageState, PlayerColor) : List<String>
	            {method} - [static] getColorEmoji(PlayerColor) : String
            }

            class ClientWaitingStateFormatter {
                {field} - [static] [final] bottom_line : String
	            {method} + [static] format(TerminalWrapper, ClientWaitingRoomState) : void
	            {method} + [static] formatStatus(TerminalWrapper, ClientWaitingRoomState) : void
            }

            class HelpScreenFormatter {
                {method} + [static] format(TerminalWrapper) : void
            }

            class MenuFormatter {
                {method} + [static] title(TerminalWrapper, ArrayList<String>) : void
                {method} + [static] connection(TerminalWrapper, ArrayList<String>, ArrayList<String>) : void
                {method} - [static] normalize(String, int) : String
            }

            class TextMessageFormatter {
                {method} + [static] format(TerminalWrapper, ArrayList<TUINotification>) : void
                {method} + [static] format(String) : ArrayList<String>
	            {method} - [static] trimExpired(ArrayList<TUINotification>) : boolean
            }

        }

        package Strategy {

            TUIView "1" -- TUIStrategy:view
            abstract TUIStrategy <<abstract>> {
                {field} # [final] view : TUIView
                {method} + [abstract] handleLine(String) : void
                {method} + [abstract] getRunnable(TerminalWrapper) : Runnable
            }

            TUIStrategy <-- TUITitleStrategy
            Controller::Client::State::TitleScreenState "1" -u- TUITitleStrategy:state
            class TUITitleStrategy {
                {field} - [final] titlescreen : ArrayList<String>
                {field} - [final] state : TitleScreenState
                {method} + handleLine(String) : void
                {method} + getRunnable(TerminalWrapper) : Runnable
            }

            TUIStrategy <-- TUIConnectionSetupStrategy
            Controller::Client::State::ConnectingState "1" -u- TUIConnectionSetupStrategy:state
            class TUIConnectionSetupStrategy {
                {field} - [final] state : ConnectingState
                {field} - [final] args: ArrayList<String>
                {field} - [final] screen : ArrayList<String> 
                {method} + handleLine(String) : void
                {method} + getRunnable(TerminalWrapper) : Runnable
                {method} + validate : boolean
            }

            TUIStrategy <-- TUIInGameStrategy
            View::TUI::CommandPreprocessor "1" -r- TUIInGameStrategy:cp
            class TUIInGameStrategy {
                {field} - [final] cp : CommandPreprocessor
                {method} + handleLine(String) : void
                {method} + getRunnable(TerminalWrapper) : Runnable
            }

        }

        ClientView <-d- TUIView
        TUIStrategy "1" -- TUIView:tuistrategy;
        TUI::TUINotification "0..N" -- TUIView:notifications
        TUI::TerminalWrapper "1" -- TUIView:terminal
        Model::Client::State::ClientState "1" --u--- TUIView:state
        class TUIView {
            {field} - [final] terminal : TerminalWrapper
            {field} - [final] notifications : ArrayList<TUINotification>
	        {field} - [final] drawthread : Thread
	        {field} - screen_runnable : Runnable
	        {field} - status_runnable : Runnable
            {field} - overlay_runnable : Runnable
	        {field} - overlay : boolean
	        {field} - [final] inputthread : Thread
	        {field} - tuistrategy : TUIStrategy
	        {field} - client_state : ClientState
            {field} - String username : String
            {field} - selected_color : PlayerColor
            {method} + draw() : void
	        {method} + show(TitleScreenState) : void
	        {method} + show(ConnectingState) : void
	        {method} + show(ClientLobbySelectState) : void
	        {method} + show(ClientSetupState) : void
	        {method} + show(ClientWaitingRoomState) : void
	        {method} + show(ClientConstructionState) : void
	        {method} + show(ClientVerifyState) : void
	        {method} + show(ClientVoyageState) : void
	        {method} + show(ClientEndgameState) : void
	        {method} + showTextMessage(String) : void
	        {method} + setClientState(ClientState) : void
	        {method} + showHelpScreen() : void
	        {method} + showStateInfo() : void
	        {method} + resetOverlay() : void
	        {method} + getStatusRunnable() : Runnable
	        {method} + handleLine(String) : void
	        {method} + changeShip(String) : void
            {method} + connect(ConnectedState) : void
	        {method} + disconnect() : void
        }
            
        TUIView "1" -- CommandPreprocessor:view
        Controller::Client::State::ConnectedState "1" -- CommandPreprocessor:state
        class CommandPreprocessor {
            {field} - [final] view : TUIView
            {field} - [final] state : ConnectedState
            {method} + process(String) : void
        }

        class MessageBuilder {
            {method} + build(String, TUIView) : ServerMessage
        }

        class TerminalWrapper {
            {field} - [final] display : Display
            {field} - [final] terminal : Terminal
            {field} - [final] keymap : KeyMap<Widget>
            {field} - [final] reader : BindingReader
            {field} - [final] previous : Attributes
            {field} - [final] termlock : Object
            {field} - [final] line : StringBuffer
            {field} - size : Size
            {field} - input : String
            {field} - legal : boolean
	        {method} - setupHooks(TUIView view) : void
	        {method} - setupBindings(TUIView) : KeyMap<Widget>
	        {method} + readBinding() : Widget
	        {method} + isAvailable() : boolean
	        {method} + takeInput() : String
	        {method} + peekInput() : String
	        {method} + print(String, int, int) : void
            {method} + printBottom(String, int) : void
	        {method} + print(Collection<String>, int, int) : void
	        {method} + printCentered(Collection<String>) : void
	        {method} + printCenteredCorner(List<String>) : void
	        {method} + puts(Capability, Object...) : void
	        {method} + setStatus(List<AttributedString>) : void
	        {method} - cleanUp(Attributes) : void
            {method} - showSmallScreen(Size) : void
            {method} + getCols() : int
            {method} + getRows() : int
            {method} + getColsOffset() : int
            {method} + getRowsOffset() : int
        }

        class TUINotification {
            {field} - [final] text : String
            {field} - [final] timestamp : Instant
            {field} - [final] ttl : Duration
            {method} + getTimestamp() : Instant
            {method} + getTTL() : Duration
            {method} + getText() : String
        }

    }

}

@enduml

'⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣤⣤⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣀⣀⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
'⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣾⣿⣿⣿⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣼⣿⣿⣿⡄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
'⠀⠀⠀⠀⠀⠀⠀⠀⢀⣾⣿⣿⣿⣿⣷⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣼⣿⣿⣿⣿⣿⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀
'⠀⠀⠀⠀⠀⠀⠀⠀⣾⣿⣿⣿⣿⣿⣿⣧⠀⠀⠀⠀⠀⠀⠀⠀⠀⢰⣿⣿⣿⣿⣿⣿⣧⠀⠀⠀⠀⠀⠀⠀⠀⠀
'⠀⠀⠀⠀⠀⠀⠀⣼⣿⣿⣿⣿⣿⣿⣿⣿⣇⠀⠀⠀⠀⠀⠀⠀⢀⣿⣿⣿⣿⣿⣿⣿⣿⡆⠀⠀⠀⠀⠀⠀⠀⠀
'⠀⠀⠀⠀⠀⠀⢰⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡄⠀⠀⠀⠀⠀⠀⣼⣿⣿⣿⣿⣿⣿⣿⣿⣷⠀⠀⠀⠀⠀⠀⠀⠀
'⠀⠀⠀⠀⠀⢀⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣧⠀⠀⠀⠀⠀⢰⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡇⠀⠀⠀⠀⠀⠀⠀
'⠀⠀⠀⠀⠀⢸⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡄⠀⠀⠀⢀⣾⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣇⠀⠀⠀⠀⠀⠀⠀
'⠀⠀⠀⠀⠀⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠀⠀⠀⠀⠀⠀⠀
'⠀⠀⠀⠀⢀⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠀⠀⠀⠀⠀⠀⠀
'⠀⠀⠀⠀⢸⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠀⠀⠀⠀⠀⠀⠀
'⠀⠀⠀⠀⠈⣿⣿⣿⣿⣿⣿⠟⠉⠀⠀⠀⠙⢿⣿⣿⣿⣿⣿⣿⣿⡿⠋⠀⠀⠙⢻⣿⣿⣿⣿⠀⠀⠀⠀⠀⠀⠀
'⠀⠀⠀⠀⠀⣿⣿⣿⣿⣿⠃⠀⠀⠀⠀⣠⣄⠀⢻⣿⣿⣿⣿⣿⡿⠀⣠⣄⠀⠀⠀⢻⣿⣿⣏⠀⠀⠀⠀⠀⠀⠀
'⠀⠀⠀⠀⠀⣾⣿⣿⣿⣿⠀⠀⠀⠀⠰⣿⣿⠀⢸⣿⣿⣿⣿⣿⡇⠀⣿⣿⡇⠀⠀⢸⣿⣿⣿⠀⠀⠀⠀⠀⠀⠀
'⠀⠀⠀⠀⠀⣿⣿⣿⣿⣿⣄⠀⠀⠀⠀⠙⠃⠀⣼⣿⣿⣿⣿⣿⣇⠀⠙⠛⠁⠀⠀⣼⣿⣿⣿⡇⠀⠀⠀⠀⠀⠀
'⠀⠀⠀⠀⠀⣿⣿⣿⣿⣿⣿⣷⣤⣄⣀⣠⣤⣾⣿⣿⣿⣿⣽⣿⣿⣦⣄⣀⣀⣤⣾⣿⣿⣿⣿⠃⠀⠀⢀⣀⠀⠀
'⠰⡶⠶⠶⠶⠿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡟⠛⠉⠉⠙⠛⠋⠀
'⠀⠀⢀⣀⣠⣤⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡿⠷⠶⠶⠶⢤⣤⣀⠀
'⠀⠛⠋⠉⠁⠀⣀⣴⡿⢿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣯⣤⣀⡀⠀⠀⠀⠀⠘⠃
'⠀⠀⢀⣤⡶⠟⠉⠁⠀⠀⠉⠛⠿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠿⠟⠉⠀⠀⠀⠉⠙⠳⠶⣄⡀⠀⠀
'⠀⠀⠙⠁⠀⠀⠀⠀⠀⠀⠀⠀⢰⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡏⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠉⠁⠀⠀
'⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢠⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣷⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
'⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣾⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
'⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣼⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
'⠀⠀⠀⠀⠀⠀⠀⠀⠀⣸⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣷⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
'⠀⠀⠀⠀⠀⠀⠀⠀⣴⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡆⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
'⠀⠀⠀⠀⠀⠀⠀⣴⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
'⠀⠀⠀⠀⠀⠀⣰⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡆⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
'⠀⠀⠀⠀⠀⢰⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣷⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
'⠀⠀⠀⠀⢀⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
'⠀⠀⠀⠀⣸⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣷⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀