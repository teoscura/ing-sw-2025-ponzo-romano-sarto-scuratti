@startuml classdiagrams

'Style config
hide circle
skinparam classFontStyle bold
skinparam groupInheritance 2
set separator ::
skinparam classAttributeIconSize 0

' =============================================================
' -!-.-!-.-!-.-!-.-!-.-!-.-!-. -!- .-!-.-!-.-!-.-!-.-!-.-!-.-!-
' ------ Getters and Setters -> omitted in large classes ------
' -------------------------------------------------------------
' -!-.-!-.-!-.-!-.-!-.-!-.-!-. -!- .-!-.-!-.-!-.-!-.-!-.-!-.-!-
' =============================================================

'Class declaration

'Components
interface Model::Components::iSC as "iBaseComponent"{
    ==methods==
    {method} +getConnectors() : ConnectorType[4]
    
    {method} +verify(iSpaceShip state, int position): bool
    {method} +check(iVisitor v): void
}

interface Model::Components::iVisitable as "iVisitable" {
    ==methods==
    {method} +check(iVisitor v): void
}

interface Model::Components::iVisitor as "iVisitor" {
    ==methods==
    {method} +updateSpaceShip(iSpaceShip ship) : void
    {method} +visit(CC cabin) : void
    {method} +visit(ACC aliencabin) : void
    {method} +visit(EC engine) : void
    {method} +visit(ASC lifesupport) : void
    {method} +visit(CNC cannon) : void
    {method} +visit(STC storage) : void
    {method} +visit(BC battery) : void
    {method} +visit(SHC component) : void
    {method} +visit(EPC component) : void 
}

class Model::Components::Visitor as "Visitor" {
    {method} +updateSpaceShip(iSpaceShip ship) : void
    {method} +visit(CC cabin): void
    {method} +visit(ACC aliencabin): void
    {method} +visit(EC engine): void
    {method} +visit(ASC lifesupport): void
    {method} +visit(CNC cannon): void
    {method} +visit(STC storage): void
    {method} +visit(BC battery): void
    {method} +visit(SHC component): void
    {method} +visit(EPC component): void 
}

abstract Model::Components::SC as "Base Component" {
    {field} -connectors : ConnectorType
    {field} -rotation: ComponentRotation
    ==methods==
    {method} +getConnectors() : ConnectorType[4]
    {method} +getRotation() : ComponentRotation
    {method} +verify(iSpaceShip state, int position): bool
    {method} +check(iVisitor v): void
}

class Model::Components::CC as "Cabin Component" {
    {field} -crew_number: int
    ==methods==
    {method} +getConnectors() : ConnectorType[4]
    {method} +getRotation() : ComponentRotation
    {method} +verify(iSpaceShip state, int position): bool
    {method} +getCrew(): int
    {method} +getCrewType(): AlienType
    {method} +check(iVisitor v): void
}

class Model::Components::ACC as "Alien Cabin Component" {
    {field} -alien_type: AlienType
    ==methods==
    {method} +getConnectors() : ConnectorType[4]
    {method} +getRotation() : ComponentRotation
    {method} +verify(iSpaceShip state, int position): bool
    {method} +getAlienType(): AlienType
    {method} +getCrew(): int
    {method} +check(iVisitor v): void
}

class Model::Components::EC as "Engine Component" {
    {field} -max_power: int
    {field} -powered: boolean
    {field} -current_power: int
    ==methods==
    {method} +getConnectors() : ConnectorType[4]
    {method} +getRotation() : ComponentRotation
    {method} +verify(iSpaceShip state, int position): bool
    {method} +turnOn(): void
    {method} +getCurrentPower(): int
    {method} +check(iVisitor v): void
}

class Model::Components::ASC as "Life Support Component" {
    {field} -type: AlienType
    ==methods==
    {method} +getConnectors() : ConnectorType[4]
    {method} +getRotation() : ComponentRotation
    {method} +verify(iSpaceShip state, int position): bool
    {method} +getType(): AlienType
    {method} +check(iVisitor v): void
}

class Model::Components::CNC as "Cannon Component"{
    {field} -max_power: int
    {field} -powered: boolean
    {field} -current_power: int
    ==methods==
    {method} +getConnectors() : ConnectorType[4]
    {method} +getRotation() : ComponentRotation
    {method} +verify(iSpaceShip state, int position): bool
    {method} +turnOn(): void
    {method} +getCurrentPower(): int
    {method} +check(iVisitor v): void
}

class Model::Components::STC as "Storage Component" {
    {field} -max_capacity: int
    {field} -shipments: ShipmentType[]
    ==methods==
    {method} +getConnectors() : ConnectorType[4]
    {method} +getRotation() : ComponentRotation
    {method} +verify(iSpaceShip state, int position): bool
    {method} +putIn(ShipmentType item): void
    {method} +getContents(): ShipmentType[]
    {method} +getCapacity(): int
    {method} +check(iVisitor v): void
}

class Model::Components::BC as "Battery Component" {
    {field} -max_capacity: int
    ==methods==
    {method} +getConnectors() : ConnectorType[4]
    {method} +getRotation() : ComponentRotation
    {method} +verify(iSpaceShip state, int position): bool
    {method} +getBatteries(): int
    {method} +check(iVisitor v): void
}

class Model::Components::SHC as "Shield Component" {
    {field} -shield_type: ShieldType
    ==methods==
    {method} +getConnectors() : ConnectorType[4]
    {method} +getRotation() : ComponentRotation
    {method} +verify(iSpaceShip state, int position): bool
    {method} +getShield(): ShieldType
    {method} +check(iVisitor v): void
}

class Model::Components::EPC as "Empty Space Component" {
    ==methods==
    {method} +getConnectors() : ConnectorType[4]
    {method} +getRotation() : ComponentRotation
    {method} +verify(iSpaceShip state, int position): bool
    {method} +check(iVisitor v): void
    'A block with no connectors.
}

'Adventure cards
interface Model::Board::iCards{
    ==methods==
    {method} +pullCard(): iCard
}

class Model::Board::Cards{
    {field} -cards: Queue<iCard>
    ==methods==
    {method} +pullCard(): iCard
}

interface Model::iCard{ 
    ==methods==
    {method} +getTitle(): String
    {method} +getText(): String
    {method} +getEffect(): CardEffect
}

class Model::Card{
    {field} -title: String
    {field} -text: String
    {field} -effect: CardEffect
    ==methods==
    {method} +getTitle(): String
    {method} +getText(): String
    {method} +getEffect(): CardEffect
}

interface Model::iCardEffect{
    ==methods==
    {method} +apply(iSpaceShip ship): Functional.BiConsumer<iStarShip, Player>.
}

class Model::CardEffect{
    ' TODO capire la sintassi per includere una funzione come variabile.
    {field} -test: Functional.BiPredicate<iStarShip, Player> 
    {field} -on_satisfy: Functional.Functional.BiConsumer<iStarShip, Player>.
    {field} -on_unsatisfy: Functional.Functional.BiConsumer<iStarShip, Player>.
    ==methods==
    {method} +apply(iSpaceShip ship): Functional.BiConsumer<iStarShip, Player>.
}

'La planche su cui giocare
interface Model::Board::iPlanche {
    ==methods==
    {method} +getPlayerPosition(PlayerColor c): int
    {method} +getPlayersAt(int position): PlayerColor[]
    {method} +movePlayer(PlayerColor c, int rel_change): void
    {method} +won(): PlayerColor
}

class Model::Board::PlancheCell {
    {field} -players: PlayerColor[]
    ==methods==
    {method} +getPlayers(): PlayerColor[]
}

class Model::Board::Planche {
    {field} cells: PlancheCell[]
    ==methods==
    {method} +getPlayerPosition(PlayerColor c): int
    {method} +getPlayersAt(int Position): PlayerColor[]
    {method} +movePlayer(PlayerColor c, int rel_change): void
    {method} +won(): PlayerColor
}

'Il mucchio di celle scoperte e non
interface Model::Board::iCommonBoard{
    ==methods==
    {method} +pullComponent(): Starship Component
    {method} +discardComponent(Starship Component a): void
    {method} +pullDiscarded(): Starship Component
}

class Model::Board::CommonBoard{
    {field} -covered_components: Queue<Starship Component>
    {field} -uncovered_components: ArrayList<Starship Component>
    ==methods==
    {method} +pullComponent(): Starship Component
    {method} +discardComponent(Starship Component a): void
    {method} +pullDiscarded(): Starship Component
}

class Model::Player::Player{
    {field} -credits: int
    {field} -crew: int[3]
    {field} -distance: int
    {field} -spaceship: SpaceShip
    {field} -color: PlayerColor
    ==methods==
    ' TODO getters and setters
}

interface Model::Player::iSpaceShip{
    ==methods==
    {method} +verify() : void
    {method} +add_component(Starship Component comp, int position) : void
    {method} +remove_component(int position) : void
    {method} +verify() : bool
    {method} +turnOn(int position) : bool
    {method} +resetPower() : void
    {method} +up(position) : int
    {method} +down(position) : int
    {method} +right(position) : int
    {method} +left(position) : int
    'called and evaluates possible
}

class Model::Player::SpaceShip{
    {field} -component: Starship Component[35]
    {field} -total_power: int
    {field} -total_firing_power: int
    {field} -total_engine_power: int
    {field} -batteries: int
    ==methods==
    {method} +verify(): void
    {method} +addComponent(Starship Component comp, int position): void
    {method} +removeComponent(int position): void
    {method} +verify(): bool
    {method} +turnOn(int position): bool
    {method} +resetPower(): void
    {method} +up(position) : int
    {method} +down(position) : int
    {method} +right(position) : int
    {method} +left(position) : int
    ----
    {method} -evaluateSpeed(): int
    {method} -evaluatePower(): int
}

'under the hood position is calculated by the client or RMI interface before being sent, so this layer of abstraction will be useful for running tests.


'Relations between classes

'Components
Model::Components::iSC^...Model::Components::SC
Model::Components::SC^...Model::Components::CC
Model::Components::CC^...Model::Components::ACC
Model::Components::SC^...Model::Components::EC
Model::Components::SC^...Model::Components::ASC
Model::Components::SC^...Model::Components::CNC
Model::Components::SC^...Model::Components::BC
Model::Components::SC^...Model::Components::STC
Model::Components::SC^...Model::Components::SHC
Model::Components::SC^...Model::Components::EPC

Model::Components::iVisitor^...Model::Components::Visitor
Model::Components::iVisitor<---Model::Components::iVisitable

'Components are Visitable
Model::Components::iVisitable^...Model::Components::SC
Model::Components::iVisitable^...Model::Components::CC
Model::Components::iVisitable^...Model::Components::ACC
Model::Components::iVisitable^...Model::Components::EC
Model::Components::iVisitable^...Model::Components::ASC
Model::Components::iVisitable^...Model::Components::CNC
Model::Components::iVisitable^...Model::Components::BC
Model::Components::iVisitable^...Model::Components::STC
Model::Components::iVisitable^...Model::Components::SHC
Model::Components::iVisitable^...Model::Components::EPC


'Cards
Model::Board::iCards^..Model::Board::Cards
Model::iCard<----*Model::Board::Cards
Model::iCard^..Model::Card
Model::iCardEffect<--*Model::Card
Model::iCardEffect^...Model::CardEffect

'Players and ships
Model::Player::Player <--* Model::Player::iSpaceShip
Model::Player::iSpaceShip ^.. Model::Player::SpaceShip
Model::Components::SC <--  "35" Model::Player::SpaceShip

'Board
Model::Board::iPlanche^..Model::Board::Planche
Model::Board::PlancheCell<- "n" Model::Board::Planche
Model::Board::iCommonBoard ^... Model::Board::CommonBoard
Model::Components::SC <--* "0..n covered_components" Model::Board::CommonBoard

@enduml

'⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣤⣤⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣀⣀⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
'⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣾⣿⣿⣿⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣼⣿⣿⣿⡄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
'⠀⠀⠀⠀⠀⠀⠀⠀⢀⣾⣿⣿⣿⣿⣷⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣼⣿⣿⣿⣿⣿⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀
'⠀⠀⠀⠀⠀⠀⠀⠀⣾⣿⣿⣿⣿⣿⣿⣧⠀⠀⠀⠀⠀⠀⠀⠀⠀⢰⣿⣿⣿⣿⣿⣿⣧⠀⠀⠀⠀⠀⠀⠀⠀⠀
'⠀⠀⠀⠀⠀⠀⠀⣼⣿⣿⣿⣿⣿⣿⣿⣿⣇⠀⠀⠀⠀⠀⠀⠀⢀⣿⣿⣿⣿⣿⣿⣿⣿⡆⠀⠀⠀⠀⠀⠀⠀⠀
'⠀⠀⠀⠀⠀⠀⢰⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡄⠀⠀⠀⠀⠀⠀⣼⣿⣿⣿⣿⣿⣿⣿⣿⣷⠀⠀⠀⠀⠀⠀⠀⠀
'⠀⠀⠀⠀⠀⢀⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣧⠀⠀⠀⠀⠀⢰⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡇⠀⠀⠀⠀⠀⠀⠀
'⠀⠀⠀⠀⠀⢸⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡄⠀⠀⠀⢀⣾⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣇⠀⠀⠀⠀⠀⠀⠀
'⠀⠀⠀⠀⠀⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠀⠀⠀⠀⠀⠀⠀
'⠀⠀⠀⠀⢀⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠀⠀⠀⠀⠀⠀⠀
'⠀⠀⠀⠀⢸⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠀⠀⠀⠀⠀⠀⠀
'⠀⠀⠀⠀⠈⣿⣿⣿⣿⣿⣿⠟⠉⠀⠀⠀⠙⢿⣿⣿⣿⣿⣿⣿⣿⡿⠋⠀⠀⠙⢻⣿⣿⣿⣿⠀⠀⠀⠀⠀⠀⠀
'⠀⠀⠀⠀⠀⣿⣿⣿⣿⣿⠃⠀⠀⠀⠀⣠⣄⠀⢻⣿⣿⣿⣿⣿⡿⠀⣠⣄⠀⠀⠀⢻⣿⣿⣏⠀⠀⠀⠀⠀⠀⠀
'⠀⠀⠀⠀⠀⣾⣿⣿⣿⣿⠀⠀⠀⠀⠰⣿⣿⠀⢸⣿⣿⣿⣿⣿⡇⠀⣿⣿⡇⠀⠀⢸⣿⣿⣿⠀⠀⠀⠀⠀⠀⠀
'⠀⠀⠀⠀⠀⣿⣿⣿⣿⣿⣄⠀⠀⠀⠀⠙⠃⠀⣼⣿⣿⣿⣿⣿⣇⠀⠙⠛⠁⠀⠀⣼⣿⣿⣿⡇⠀⠀⠀⠀⠀⠀
'⠀⠀⠀⠀⠀⣿⣿⣿⣿⣿⣿⣷⣤⣄⣀⣠⣤⣾⣿⣿⣿⣿⣽⣿⣿⣦⣄⣀⣀⣤⣾⣿⣿⣿⣿⠃⠀⠀⢀⣀⠀⠀
'⠰⡶⠶⠶⠶⠿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡟⠛⠉⠉⠙⠛⠋⠀
'⠀⠀⢀⣀⣠⣤⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡿⠷⠶⠶⠶⢤⣤⣀⠀
'⠀⠛⠋⠉⠁⠀⣀⣴⡿⢿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣯⣤⣀⡀⠀⠀⠀⠀⠘⠃
'⠀⠀⢀⣤⡶⠟⠉⠁⠀⠀⠉⠛⠿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠿⠟⠉⠀⠀⠀⠉⠙⠳⠶⣄⡀⠀⠀
'⠀⠀⠙⠁⠀⠀⠀⠀⠀⠀⠀⠀⢰⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡏⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠉⠁⠀⠀
'⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢠⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣷⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
'⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣾⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
'⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣼⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
'⠀⠀⠀⠀⠀⠀⠀⠀⠀⣸⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣷⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
'⠀⠀⠀⠀⠀⠀⠀⠀⣴⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡆⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
'⠀⠀⠀⠀⠀⠀⠀⣴⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
'⠀⠀⠀⠀⠀⠀⣰⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡆⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
'⠀⠀⠀⠀⠀⢰⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣷⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
'⠀⠀⠀⠀⢀⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
'⠀⠀⠀⠀⣸⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣷⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀

