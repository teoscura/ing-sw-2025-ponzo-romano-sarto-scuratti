@startuml uml_complete
hide circle
skinparam classFontStyle bold
skinparam groupInheritance 1
set separator ::
skinparam classAttributeIconSize 12

package Model {

    package Cards {

        package State {

            abstract CardState {
                {field} [protected] state : VoyageState
                {method} + init(ClientState) : void
                {method} + [abstract] validate() : void
                {method} + [abstract] getClientCardState() : ClientCardState
                {method} + [abstract] getNext() : CardState
                {method} + transition() : void
                {method} + setNewShipCentre(Player, ShipCoords) : void
                {method} + turnOn(Player, ShipCoords, ShipCoords) : void
                {method} + removeCrew(Player, ShipCoords): void
                {method} + moveCargo(Player, ShipmentType, ShipCoords, ShipCoords) : void
                {method} + takeCargo(Player, ShipmentType, ShipCoords) : void
                {method} + discardCargo(Player, ShipmentType, ShipCoords) : void
                {method} + selectLanding(Player, int) : void
                {method} + progressTurn(Player) : void
                {method} + setTakeReward(Player, boolean) : void
                {method} + connect(Player) : void
                {method} + disconnect(Player) : void
            }

            CardState^--AbandonedShipAnnounceState
            class AbandonedShipAnnounceState {
                {field} [final] card : AbandonedShipCard
                {field} [final] list : List<Player>
                {field} responded : boolean
                {field} id : int
                {method} + init(ClientState) : void
                {method} + validate(ServerMessage) : void
                {method} + getClientCardState() : ClientCardState
                {method} + getNext() : CardState
                {method} + selectLanding(Player, int) : void
                {method} + disconnect(Player) : void
            }

            CardState^--AbandonedShipRewardState
            class AbandonedShipRewardState {
                {field} [final] card : AbandonedShipCard
                {field} [final] list : List<Player>
                {field} coords : List<ShipCoords>
                {field} responded : boolean
                {method} + init(ClientState) : void
                {method} + validate(ServerMessage) : void
                {method} + getClientCardState() : ClientCardState
                {method} + getNext() : CardState
                {method} + removeCrew(Player, ShipCoords) : void
                {method} + disconnect(Player) : void
            }

            CardState^--AbandonedStationAnnounceState
            class AbandonedStationAnnounceState {
                {field} [final] card : AbandonedStationCard
                {field} [final] list : List<Player>
                {field} responded : boolean
                {field} id : int
                {method} + init(ClientState) : void
                {method} + validate(ServerMessage) : void
                {method} + getClientCardState() : ClientCardState
                {method} + getNext() : CardState
                {method} + selectLanding(Player, int) : void
                {method} + disconnect(Player) : void
            }

            CardState^--AbandonedStationRewardState
            class AbandonedStationRewardState {
                {field} [final] card : AbandonedStationCard
                {field} [final] list : List<Player>
                {field} responded : boolean
                {method} + init(ClientState) : void
                {method} + validate(ServerMessage) : void
                {method} + getClientCardState() : ClientCardState
                {method} + getNext() : CardState
                {method} + takeCargo(Player, ShipmentType, ShipCoords) : void
                {method} + moveCargo(Player, ShipmentType, ShipCoords, ShipCoords) : void
                {method} + discardCargo(Player, ShipmentType, ShipCoords) : void
                {method} + progressTurn(Player) : void
                {method} + disconnect(Player) : void

            }

            CardState^--CombatZoneAnnounceState
            class CombatZoneAnnounceState {
                {field} [final] card_id : int
                {field} [final] sections : List<CombatZoneSection>
                {field} [final] shots : ProjectileArray
                {field} awaiting : List<Player>
                {field} target : Player
                {method} + init(ClientState) : void
                {method} + validate(ServerMessage) : void
                {method} + getClientCardState() : ClientCardState
                {method} + getNext() : CardState
                {method} + turnOn(Player, ShipCoords, ShipCoords) : void
                {method} + progressTurn(Player) : void
                {method} + disconnect(Player) : void
            }

            CardState^--CombatZonePenaltyState
            class CombatZonePenaltyState {
                {field} [final] card_id : int
                {field} [final] sections : List<CombatZoneSection>
                {field} [final] shots : ProjectileArray
                {field} target : Player
                {field} [final] required : int[]
                {field} responded : boolean
                {field} coords : List<ShipCoords>
                {method} + init(ClientState) : void
                {method} + validate(ServerMessage) : void
                {method} + getClientCardState() : ClientCardState
                {method} + getNext() : CardState
                {method} + turnOn(Player, ShipCoords, ShipCoords) : void
                {method} + progressTurn(Player) : void
                {method} + removeCrew(Player, ShipCoords) : void
                {method} + discardCargo(Player, ShipmentType, ShipCoords) : void
                {method} + disconnect(Player) : void
            }

            CardState^--CombatZoneSelectShipState
            class CombatZoneSelectShipState {
                {field} [final] card_id : int
                {field} [final] sections : ArrayList<CombatZoneSection>
                {field} [final] shots : ProjectileArray
                {field} [final] target : Player
                {method} + init(ClientState) : void
                {method} + validate(ServerMessage) : void
                {method} + getClientCardState() : ClientCardState
                {method} + getNext() : CardState
                {method} + selectBlob(Player, ShipCoords) : void
                {method} + disconnect(Player) : void
            }

            CardState^--EpidemicState
            class EpidemicState {
                {field} [final] card : EpidemicCard
                {field} [final] awaiting : List<Player>
                {method} + init(ClientState) : void
                {method} + validate(ServerMessage) : void
                {method} + getClientCardState() : ClientCardState
                {method} + getNext() : CardState
                {method} + progressTurn(Player) : void
                {method} + disconnect(Player) : void
            }

            CardState^--MeteorAnnounceState
            class MeteorAnnounceState {
                {field} [final] card_id : int
                {field} [final] left : ProjectileArray
                {field} [final] awaiting : List<Player>
                {field} broke_cabin : boolean
                {method} + init(ClientState) : void
                {method} + validate(ServerMessage) : void
                {method} + getClientCardState() : ClientCardState
                {method} + getNext() : CardState
                {method} + turnOn(Player, ShipCoords, ShipCoords) : void
                {method} + progressTurn(Player) : void
                {method} + disconnect(Player) : void
            }

            CardState^--MeteorSelectShipState
            class MeteorSelectShipState {
                {field} [final] card_id : int
                {field} [final] left : ProjectileArray
                {method} + init(ClientState) : void
                {method} + validate(ServerMessage) : void
                {method} + getClientCardState() : ClientCardState
                {method} + getNext() : CardState
                {method} + selectBlob(Player, ShipCoords) : void
                {method} + disconnect(Player) : void
            }

            CardState^--OpenSpaceState
            class OpenSpaceState {
                {field} [final] card : OpenSpaceCard
                {field} [final] awaiting : List<Player>
                {method} + init(ClientState) : void
                {method} + validate(ServerMessage) : void
                {method} + getClientCardState() : ClientCardState
                {method} + getNext() : CardState
                {method} + turnOn(Player, ShipCoords, ShipCoords) : void
                {method} + progressTurn(Player) : void
                {method} + disconnect(Player) : void
            }

            CardState^--PiratesAnnounceState
            class PiratesAnnounceState {
                {field} [final] card : PiratesCard
                {field} [final] list : List<Player>
                {field} responded : boolean
                {field} result : boolean
                {method} + init(ClientState) : void
                {method} + validate(ServerMessage) : void
                {method} + getClientCardState() : ClientCardState
                {method} + getNext() : CardState
                {method} + turnOn(Player, ShipCoords, ShipCoords) : void
                {method} + progressTurn(Player) : void
                {method} + disconnect(Player) : void
            }

            CardState^--PiratesSelectShipState
            class PiratesSelectShipState {
                {field} [final] card : PiratesCard
                {field} [final] list : List<Player>
                {field} [final] shots : ProjectileArray
                {method} + init(ClientState) : void
                {method} + validate(ServerMessage) : void
                {method} + getClientCardState() : ClientCardState
                {method} + getNext() : CardState
                {method} + selectBlob(Player, ShipCoords) : void
                {metohd} + disconnect(Player) : void
            }

            CardState^--PiratesPenaltyState
            class PiratesPenaltyState {
                {field} [final] card : PiratesCard
                {field} [final] list : List<Player>
                {field} [final] shots : ProjectileArray
                {field} responded : boolean
                {method} + init(ClientState) : void
                {method} + validate(ServerMessage) : void
                {method} + getClientCardState() : ClientCardState
                {method} [protected] getNext() : CardState
                {method} + turnOn(Player, ShipCoords, ShipCoords) : void
                {method} + progressTurn(Player) : void
                {method} + disconnect(Player) : void
            }

            CardState^--PiratesRewardState
            class PiratesRewardState {
                {field} [final] card : PiratesCard
                {field} [final] list : List<Player>
                {field} responded : boolean
                {field} took_reward : boolean
                {method} + init(ClientState) : void
                {method} + validate(ServerMessage) : void
                {method} + getClientCardState() : ClientCardState
                {method} [protected] getNext() : CardState
                {method} + setTakeReward(Player, boolean) : void
                {method} + disconnect(Player) : void
            }

            CardState^--PlanetAnnounceState
            class PlanetAnnounceState {
                {field} [final] card : PlanetCard
                {field} [final] list : List<Player>
                {field} responded : boolean
                {field} id : int
                {method} + init(ClientState) : void
                {method} + validate(ServerMessage) : void
                {method} + getClientCardState() : ClientCardState
                {method} + getNext() : CardState
                {method} + selectLanding(Player, int) : void
                {method} + disconnect(Player) : void
            }

            CardState^--PlanetRewardState
            class PlanetRewardState {
                {field} [final] card : PlanetCard
                {field} [final] list : List<Player>
                {field} [final] id : int
                {field} responded : boolean
                {method} + init(ClientState) : void
                {method} + validate(ServerMessage) : void
                {method} + getClientCardState() : ClientCardState
                {method} + getNext() : CardState
                {method} + takeCargo(Player, ShipmentType, ShipCoords) : void
                {method} + moveCargo(Player, ShipmentType, ShipCoords, ShipCoords) : void
                {method} + discardCargo(Player, ShipmentType, ShipCoords) : void
                {method} + progressTurn(Player) : void
                {method} + disconnect(Player) : void
            }

            CardState^--SlaversAnnounceState
            class SlaversAnnounceState {
                {field} [final] card : SlaversCard
                {field} [final] list : List<Player>
                {field} responded : boolean
                {field} result : boolean
                {method} + init(ClientState) : void
                {method} + validate(ServerMessage) : void
                {method} + getClientCardState() : ClientCardState
                {method} + getNext() : CardState
                {method} + turnOn(Player, ShipCoords, ShipCoords) : void
                {method} + progressTurn(Player) : void
                {method} + disconnect(Player) : void
            }

            CardState^--SlaversLoseState
            class SlaversLoseState {
                {field} [final] card : SlaversCard
                {field} [final] list : List<Player>
                {field} responded : boolean
                {field} coords : List<ShipCoords>
                {method} + init(ClientState) : void
                {method} + validate(ServerMessage) : void
                {method} + getClientCardState() : ClientCardState
                {method} + getNext() : CardState
                {method} + removeCrew(Player, ShipCoords) : void
                {method} + disconnect(Player) : void
            }

            CardState^--SlaversRewardState
            class SlaversRewardState {
                {field} [final] card : SlaversCard
                {field} [final] list : List<Player>
                {field} responded : boolean
                {field} took_reward : boolean
                {method} + init(ClientState) : void
                {method} + validate(ServerMessage) : void
                {method} + getClientCardState() : ClientCardState
                {method} + getNext() : CardState
                {method} + setTakeReward(Player, boolean) : void
                {method} + disconnect(Player) : void
            }

            CardState^--SmugglersAnnounceState
            class SmugglersAnnounceState {
                {field} [final] card : SmugglersCard
                {field} [final] list : List<Player>
                {field} responded : boolean
                {field} result : boolean
                {method} + init(ClientState) : void
                {method} + validate(ServerMessage) : void
                {method} + getClientCardState() : ClientCardState
                {method} + getNext() : CardState
                {method} + turnOn(Player, ShipCoords, ShipCoords) : void
                {method} + progressTurn(Player) : void
                {method} + disconnect(player) : void
            }

            CardState^--SmugglersLoseState
            class SmugglersLoseState {
                {field} [final] card : SmugglersCard
                {field} [final] list : List<Player>
                {field} [final] required : int[]
                {field} responded : boolean
                {method} + init(ClientState) : void
                {method} + validate(ServerMessage) : void
                {method} + getClientCardState() : ClientCardState
                {method} + getNext() : CardState
                {method} + discardCargo(Player, ShipmentType, ShipCoords) : void
                {method} + disconnect(Player) : void
            }

            CardState^--SmugglersRewardState
            class SmugglersRewardState {
                {field} [final] card : SmugglersCard
                {field} [final] list : List<Player>
                {field} responded : boolean
                {field} took_reward : boolean
                {method} + init(ClientState) : void
                {method} + validate(ServerMessage) : void
                {method} + getClientCardState() : ClientCardState
                {method} + getNext() : CardState
                {method} + takeCargo(Player, ShipmentType, ShipCoords) : void
                {method} + moveCargo(Player, ShipmentType, ShipCoords, ShipCoords) : void
                {method} + discardCargo(Player, ShipmentType, ShipCoords) : void
                {method} + progressTurn(Player) : void
                {method} + disconnect(Player) : void
            }

            CardState^--StardustState
            class StardustState {
                {field} [final] card : StardustCard
                {field} awaiting : List<Player>
                {method} + init(ClientState) : void
                {method} + validate(ServerMessage) : void
                {method} + getClientCardState() : ClientCardState
                {method} + getNext() : CardState
                {method} + progressTurn(Player) : void
            }

            CardState^--SelectShipReconnectState
            class SelectShipReconnectState {
                {field} [final] resume : CardState
                {field} [final] awaiting : Player
                {method} + init(ClientState) : void
                {method} + validate(ServerMessage) : void
                {method} + getClientCardState() : ClientCardState
                {method} + getNext() : CardState
                {method} + selectBlob(Player, ShipCoords) : void
                {method} + disconnect(Player) : void
            }
        }

        package Utils {

            class CombatZoneSection {
                {field} [final] criteria : CombatZoneCriteria
                {field} [final] penalty : CombatZonePenalty
                {field} [final] amount : int
                {method} + getCriteria)() : CombatZoneCriteria
                {method} + getPenalty() : CombatZonePenalty
                {method} + getAmount() : int
            }

            class Planet {
                {field} [final] contains : int[]
                {field} [final] visited : boolean
                {method} + getContains() : int[]
                {method} + visit() : void
                {method} + getVisited() : boolean
                {method} + getTotalContains() : int
            }
            
            class Projectile {
                {field} [final] direction : ProjectileDirection
                {field} [final] dimension : ProjectileDimension
                {field} [final] offset : int
                {method} + getDirection() : ProjectileDirection
                {method} + getDimension() : PrjectileDimension
                {method} + getOffset() : int
            }         

            class ProjectileArray {
                {field} [field] projectiles : List<Projectile>
                {method} + getProjectiles : List<Projectile>
            }
        }

        package Visitors {
            
            class ContainerMoveValidationVisitor {
                {field} [final] searching_for : ShipmentType
                {field} found : boolean
                {method} + visit(StorageComponent) : void
            }

            class ContainsLoaderVisitor {
                {field} [final] ship : SpaceShip
                {field} [final] cargo : ShipmentType
                {method} + visit(StorageComponent) : void
            }
            
            class ContainsRemoveVisitor {
                {field} [final] searching : shipmentType
                {method} + visit(StorageComponent) : void
                {method} + visit(BatteryCompoent) : void
            }

            class CrewRemoveVisitor {
                {field} [final] ship : SpaceShip
                {field} searching : ShipmentType
                {method} + changeType(ShipmentType) : void
                {method} + visit(CabinComponent) : void
                {method} + visit(AlienLifeSupportComponent) : void
            }

            class LargeMeteorVisitor {
                {field} d : ProjectileDirection
                {field} found_cannon : boolean
                {method} + visit(CannonComponent) : void
            }

        }

        interface iCard <<interface>> {
            {method} getId() : int
            {method} getDays() : int
            {method} getState(VoyageState) : CardState
            {method} getExhausted() : boolean
        }

        iCard^--Card
        abstract Card <<abstract>> {
            {field} id : int
            {field} days : int
            {field} exhausted : boolean
            {method} + getId() : int
            {method} + getDays() : int
            {method} + getExhausted() : boolean
            {method} [protected] exhaust() : void
        }

        Card^--AbandonedShipCard
        class AbandonedShipCard {
            {field} credits_gained : int
            {field} crew_lost : int
            {method} + getState(VoyageState) : CardState
            {method} + getCredits() : int
            {method} + getCrewLost() : int
            {method} + apply(VoyageState, Player, int) : void
        }

        Card^--AbandonedStationCard
        class AbandonedStationCard {
            {field} planet : Planet
            {field} crew : int
            {method} + getState(VoyageState) : CardState
            {method} + getPlanet() : Planet
            {method} + getCrewLost() : int
            {method} + apply(VoyageState, Player, int) : void
        }

        Card^--CombatZoneCard
        class CombatZoneCard {
            {field} sections : List<CombatZoneSection>
            {field} shots : ProjectileArray
            {method} + getState(VoyageState) : C
        }

        Card^--EpidemicCard
        class EpidemicCard {
            {method} + getState(VoyageState) : CardState
            {method} + apply(VoyageState, Player) : void
        }

        Card^--MeteorSwarmCard
        class MeteorSwarmCard {
            {field} meteorites : ProjectileArray
            {method} + getState(VoyageState) : CardState
            {method} + getMeteorites() : ProjectileArray
            {method} + apply(VoyageState, Projectile) : void
        }

        Card^--OpenSpaceCard
        class OpenSpaceCard {
            {method} + getState(VoyageState) : CardState
            {method} + apply(VoyageState, Player) : void
        }

        Card^--PiratesCard
        class PiratesCard {
            {field} [final] shots : ProjectileArray
            {field} [field] credits : int
            {field} [final] min_power : int
            {method} + getState(VoyageState) : CardState
            {method} + getCredits() : int
            {method} + getShots() : ProjectileArray
            {method} + apply(VoyageState, Player) : void
        }

        Card^--PlanetCard
        class PlanetCard {
            {field} [final] planets : List<Planet>
            {field} [final] left : int
            {method} + getState(VoyageState) : CardState
            {method} + getVisited() : List<boolean>
            {method} + getPlanet() : Planet
            {method} + getSize() : int
            {method} + apply(Player, int) : void
        }

        Card^--SlaversCard
        class SlaversCard {
            {field} [final] min_power : int
            {field} [final] crew_penalty : int
            {field} [final] credits : int
            {method} + getState(VoyageState) : CardState
            {method} + getCrewLost() : int
            {method} + getCredits() : int
            {method} + apply(VoyageState, Player) : void
        }

        Card^--SmugglersCard
        class SmugglersCard {
            {field} [final] reward : planet
            {field} [final] cargo_taken : int
            {field} [field] min_power : int
            {method} + getState(VoyageState) : CardState
            {method} + getReward() : Planet
            {method} + getCargoPenalty() : int
            {method} + apply(player) : void
        }

        Card^--StardustCard
        class StardustCard {
            {method} + getState(VoyageState) : CardState
            {method} + apply(VoyageState, Player) : void
        }
    }

    Components::Visitors::iVisitor .. ContainsLoaderVisitor
    Components::Visitors::iVisitor .. ContainsRemoveVisitor
    Components::Visitors::iVisitor .. CrewRemoveVisitor
    Components::Visitors::iVisitor .. LargeMeteorVisitor

    package Board {

        interface iCards <<interface>> {
            {method} pullCard() : iCard
            {method} getLeft() : int
            {method} getConstructionCards : List<Integer>
        }

        iCards^--TestFlightCards
        class TestFlightCards {
            {field} [final] cards : ArrayDeque<iCard>
            {method} + pullCard() : iCard
            {method} + getLeft() : int
            {method} + getConstructionCards : List<Integer>
        }

        iCards^--LevelTwoCards
        class LevelTwoCards {
            {field} cards : ArrayDeque<iCard>
            {field} construction_cards : ArrayList<Integer>
            {method} + pullCard() : iCard
            {method} + getLeft() : int
            {method} + getConstructionCards : List<Integer>
        }

        interface iCommonBoard <<interface>> {
            {method} getCoveredSize() : int
            {method} pullComponent() : BaseComponent
            {method} discardComponent(BaseComponent) : void
            {method} pullDiscarded(int) : BaseComponent
            {method} getDiscarded() : ArrayList<Integer>
        }

        iCommonBoard^..CommonBoard
        class CommonBoard {
            {field} [final] covered_components : ArrayDeque<BaseComponent>
            {field} [final] discarded_components : HashMap<Integer, BaseComponent>
            {method} + getCoveredSize() : int
            {method} + pullComponent() : BaseComponent
            {method} + discardComponent(BaseComponent) : void
            {method} + pullDiscarded(int) : BaseComponent
            {method} + getDiscarded() : ArrayList<Integer>
        }

        interface iPlanche <<interface>> {
            {method} getPlayerPosition(Player) : int
            {method} getPlayerAt(int) : Player
            {method} movePlayer(VoyageState, Player, int) : void
            {method} loseGame(Player) : void
        }


        iPlanche^..Planche
        class Planche{
            {field} [final] planche : HashMap<Player, Integer>
            {field} [final] length : int
            {method} + getPlayerPosition(Player) : int
            {method} + getPlayerAt(int) : Player
            {method} + movePlayer(VoyageState, Player, int) : void
            {method} + loseGame(Player) : void
        }
    }

    package Components {
        
        package Visitors {

            interface iVisitable <<interface>> {
                {method} + check(iVisitor) : void
            }

            interface iVisitor <<interface>> {
                {method} + visit(CabinComponent) : void
                {method} + visit(EngineComponent) : void
                {method} + visit(AlienLifeSupportComponent) : void
                {method} + visit(CannonComponent) : void
                {method} + visit(StorageComponent) : void
                {method} + visit(BatteryComponent) : void
                {method} + visit(ShieldComponent) : void
                {method} + visit(EmptyComponent) : void
                {method} + visit(StructuralComponent) : void
                {method} + visit(StartingCabinComponent) : void
            }

            iVisitor^..CabinVisitor
            class CabinVisitor {
                {field} type : AlienType
                {method} + getSupportedType() : AlienType
                {method} + visit(AlienLifeSupportComponent) : void
            }

            iVisitor^--CrewSetVisitor
            class CrewSetVisitor {
                {field} [field] ship : SpaceShip
                {field} [field] type : AlienType
                {method} + visit(CabinComponent) : void
            }

            iVisitor^..EnergyVisitor
            class EnergyVisitor {
                {field} positive : boolean
                {field} found_battery : boolean
                {field} powerable : boolean
                {field} has_battery : boolean
                {method} + visit(BaseComponent) : void
                {method} + getFoundBatteryComponent() : boolean
                {method} + getPowerable() : boolean
                {method} + hasBattery() : boolean
                {method} + toggle() : void
            }

            iVisitor^..FreeSpaceVisitor
            class FreeSpaceVisitor {
                {field} isfree : boolean
                {method} + visit(BaseComponent) : void
                {method} + getSpaceIsFree() : boolean
            }

            class LifeSupportUpdateVisitor {
                {field} [final] type : AlienType
                {field} still_alive : boolean
                {method} + getStillAlive() : boolean
                {method} + visit(CabinComponent) : void
                {method} + visit(AlienLifeSupportComponent) : void
            }

            iVisitor^..SpaceShipUpdateVisitor
            class SpaceShipUpdateVisitor {
                {field} [final] containers : int[]
                {field} [final] crew_members : int[]
                {field} [field] directions : boolean[]
                {field} engine_power : int
                {field} cannon_power : double
                {method} + visit(BaseComponent) : void
                {method} + getEnginePower() : int
                {method} + getCannonPower() : double
                {method} + getContainers() : int[]
                {method} + getCrewMembers() : int[]
                {method} + getDirections() : boolean[]
            }
        
        }

        Visitors::iVisitable ^--BaseComponent
        abstract BaseComponent <<abstract>> {
            {field} [final] id : int
            {field} [final] connectors : ConnectorType[]
            {field} [protected] coords : ShipCoords
            {field} rotation : ComponentRotation
            {method} + getID() : int
            {method} + getConnectors() : ConnectorType[]
            {method} + getRotation() : ComponentRotation
            {method} + rotate(ComponentRotation) : void
            {method} + verify(SpaceShip) : boolean
            {method} + getConnector(ComponentRotation) : ConnectorType
            {method} + getCoords() : ShipCoords
            {method} + powerable() : boolean
            {method} + [abstract] onCreation(SpaceShip, ShipCoords) : void
            {method} + [abstract] onDelete(SpaceShip) : void
            {method} + [abstract] getClientComponent() : ClientComponent
            {method} + [abstract] check(iVisitor) : void
            {method} + getConnectedComponents(SpaceShip) : BaseComponent[]


        }

        BaseComponent^..AlienLifeSupportComponent
        class AlienLifeSupportComponent{
          
			{field} - type: AlienType
			{method} + check(iVisitor) : void
			{method} + getType() : AlienType
			{method} + onCreation(SpaceShip) : void
			{method} + onDelete(SpaceShip) : void
			{method} + getClientComponent() : ClientComponent
		}

        BaseComponent^..BatteryComponent
        class BatteryComponent {
			{field} - contains : int
			{field} - max : int
			{method} + check(iVisitor) : void
			{method} + getContains() : int
			{method} + getCapacity() : int
			{method} + takeOne() : void
			{method} + putOne() : void
			{method} + onCreation(SpaceShip) : void
			{method} + onDelete(SpaceShip) : void
			{method} + getClientComponent() : ClientComponent
		}

        BaseComponent^..CabinComponent
        class CabinComponent{
			{field} - crew_number : int
			{field} - crew_type : AlienType
		   	{method} + check(iVisitor) : void
			{method} + getCrew() : int
			{method} + getCrewType() : AlienType			
			{method} + setCrew(SpaceShip, int, AlienType) : void
			{method} + onCreation(SpaceShip) : void
			{method} + onDelete(SpaceShip) : void
			{method} + getClientComponent() : ClientComponent
		}

        BaseComponent^..StartingCabinComponent
        class StartingCabinComponent{
			{field} - color : PlayerColor
			{field} - crew_number : int
		   	{method} + check(iVisitor) : void
			{method} + getCrew() : int
			{method} + getCrewType() : AlienType		
			{method} + getColor() : PlayerColor
			{method} + setCrew(SpaceShip, int, AlienType)
			{method} + onCreation(SpaceShip) : void
			{method} + onDelete(SpaceShip) : void
			{method} + getClientComponent() : ClientComponent
		}

        BaseComponent^..CannonComponent
        class CannonComponent{			
			{field} - max_power : int
			{field} - powered : boolean
			{field} - powerable : boolean
			{method} + check(iVisitor) : void
			{method} + verify(SpaceShip) : boolean
			{method} + turnOn() : void
			{method} + turnOff() : void
			{method} + getCurrentPower() : int
			{method} + getPower() : int
			{method} + powerable() : boolean		
			{method} + onCreation(SpaceShip) : void
			{method} + onDelete(SpaceShip) : void
			{method} + getClientComponent() : ClientComponent
		}

        BaseComponent^..EmptyComponent
        class EmptyComponent{
			{method} + verify(SpaceShip) : boolean
			{method} + check(iVisitor) : void
			{method} + getConnectors() : ConnectorType[]
			{method} + onCreation(SpaceShip) : void
			{method} + onDelete(SpaceShip) : void
			{method} + getClientComponent() : ClientComponent
		}

        BaseComponent^..EngineComponent
        class EngineComponent{
			{field} - max_power : int
			{field} - powered : boolean
			{field} - powerable : boolean
			{method} + verify(SpaceShip) : boolean
			{method} + check(iVisitor) : void
			{method} + turnOn() : void
			{method} + turnOff() : void
			{method} + getCurrentPower() : int
			{method} + getPower() : int
			{method} + powerable() : boolean		
			{method} + onCreation(SpaceShip) : void
			{method} + onDelete(SpaceShip) : void
			{method} + getClientComponent() : ClientComponent
		}

        BaseComponent^..ShieldComponent
        class ShieldComponent{
			{field} - powered : boolean
			{method} + check(iVisitor) : void
			{method} + turnOn() : void
			{method} + turnOff() : void
			{method} + getPowered() : boolean
			{method} + powerable() : boolean	
			{method} + onCreation(SpaceShip) : void
			{method} + onDelete(SpaceShip) : void
			{method} + getShield() : ShieldType
			{method} + getClientComponent() : ClientComponent

		}
        
		BaseComponent^..StorageComponent
        class StorageComponent{
			{field} - [final] shipment : int []
			{field} - [final] type : StorageType
			{field} - currently_full : int
			{method} + putIn(ShipmentType) : void
			{method} + takeOut(ShipmentType) : boolean
			{method} + howMany(ShipmentType) : int
			{method} + getFreeSpaces() : int
			{method} + getSpecial() : boolean
			{method} + getCapacity() : int
			{method} + onCreation(SpaceShip) : void
			{method} + onDelete(SpaceShip) : void
			{method} + check(iVisitor) : void
			{method} + getClientComponent() : ClientComponent

		}
        BaseComponent^..StructuralComponent
        class StructuralComponent{
			{method} + check(iVisitor) : void
			{method} + onCreation(SpaceShip) : void
			{method} + onDelete(SpaceShip) : void
			{method} + getClientComponent() : ClientComponent
		}

    }

    package Player {

        class Player {
            {field} [final] username : String
            {field} [final] color : PlayerColor
            {field} [final] ship : SpaceShip
            {field} [transient] descriptor : ClientDescriptor
            {field} credits : int
            {field} retired : boolean
            {field} disconnected : boolean
            {method} + getUsername() : String
            {method} + getColor() : String
            {method} + retire() : void
            {method} + getRetired : boolean
            {method} + reconnect() : void
            {method} + disconnect() : void
            {method} + getDisconnected() : boolean
            {method} + giveCredits(int) : int
            {method} + getCredits() : int
            {method} + finalScore() : void
            {method} + reconnect(ClientDescriptor) : void
            {method} + getSpaceShip() : SpaceShip
            {method} + bindDescriptor(ClientDescriptor) : void
            {method} + getDescriptor() : ClientDescriptor
            {method} + voyageInfo(iPlanche) : String
            {method} + equals : boolean
        }

        class SpaceShip {
            {field} [final] player : Player
            {field} [final] storage_coords : ArrayList<ShipCoords>
            {field} [final] cabin_coords : ArrayList<ShipCoords>
            {field} [final] battery_coords : ArrayList<ShipCoords>
            {field} [final] powerable_coords : ArrayList<ShipCoords>
            {field} [final] type : GameModeType
            {field} [final] components : BaseComponent[][]
            {field} [final] empty : BaseComponent
            {field} blobs : ArrayList<ArrayList<ShipCoords>>
            {field} crew : int[]
            {field} center : ShipCoords
            {field} containers : int[]
            {field} shielded_directions : boolean[]
            {field} cannon_power : double
            {field} engine_power : int
            {method} + getType() : GameModeType
            {method} + getCrew() : int[]
            {method} + bulkVerify() : VerifyResult[][]
            {method} + bulkVerifyResult() : boolean
            {method} + getBlobsSize() : int
            {method} + updateShipBlobs() : void
            {method} + verifyBlob(VerifyResult[][]) : ArrayList<ShipCoords>
            {method} + selectShipBlob(ShipCoords) : void
            {method} + addComponent(BaseComponent, ShipCoords) : void
            {method} + removeComponent(ShipCoords) : void
            {method} + updateShip() : void
            {method} + resetPower() : void
            {method} + turnOn(ShipCoords, ShipCoords) : void
            {method} + getComponent : BaseComponent
            {method} + getCannonPower() : double
            {method} + getEnginePower() : int
            {method} + getEnergyPOwer() : int
            {method} + getShieldedDirections() : int
            {method} + getHeight() : int
            {method} + getWidth() : int
            {method} + getEmpty() : BaseComponent
            {method} + addStorageCoords(ShipCoords) : void
            {method} + delStorageCoords(ShipCoords) : void
            {method} + addCabinCoords(ShipCoords) : void
            {method} + delCabinCoords(ShipCoords) : void
            {method} + addBatteryCoords(ShipCoords) : void
            {method} + delBatteryCoords(ShipCoords) : void
            {method} + addPowerableCoords(ShipCoords) : void
            {method} + delPowerableCoords(ShipCoords) : void
            {method} + getTotalCrew() : int
            {method} + findConnectedCabins() : ArrayList<ShipCoords>
            {method} + countExposedConnectors() : int
            {method} + handleMeteorite(Projectile) : void
            {method} + handleShot(Projectile) : void
            {method} + normalizeRoll(ProjectileDirection, int) : int
            {method} + getFirst(ProjectileDirection, int) : ShipCoords
            {method} + constrctCol(int) : BaseComponent[]
            {method} + findCannon(ProjectileDirection, int) : boolean
            {method} + getContains() : int[]
            {method} + isCabin(ShipCoords) : boolean
            {method} + getClientSpaceShip() : ClientSpaceShip
        }

        ShipCoords <-- "1" Components::BaseComponent
        class ShipCoords{
            {field} [final] x : int
            {field} [final] y : int
            {field} [final] type : GameModeType
            {method} + getType() : GameModeType
            {method} + getNextTo() : ShipCoords[]
            {method} + up() : ShipCoords
            {method} + down() : ShipCoords
            {method} + right() : ShipCoords
            {method} + left() : ShipCoords
            {method} + toString() : String
            {method} + equals(Object) : boolean
        }

    }

    package State {
        
        abstract GameState <<abstract>> {
            {field} # [final] model : ModelInstance 
            {field} # [final] type : GameModeType
            {field} # [final] count : PlayerCount
            {field} # [final] players : List<Player>
            {method} + [abstract] validate(ServerMessage message) : void
            {method} + [abstract] getNext() : GameState 
            {method} + [abstract] getClientState() : ClientState
            {method} + [abstract] toSerialize() : boolean
            {method} + [abstract] toString() : String
            {method} + [abstract] getOngoingEntry(int) : ClientGameListEntry
            {method} + init() : void
            {method} + broadcastMessage(ClientMessage) : void
            {method} + transition() : void
            {method} + getCount() : PlayerCount
            {method} + getPlayer(PlayerColor) : Player
            {method} + getType() : GameModeType
            {method} + getModelID() : int
            {method} + connect(ClientDescriptor client) : void
            {method} + disconnect(ClientDescriptor client) : void
            {method} + connect(Player) : void
            {method} + disconnect(Player) : void
            {method} + sendContinue(Player) : void
            {method} + putComponent(Player, ShipCoords coords) : void
            {method} + takeComponent(Player) : void
            {method} + takeDiscarded(Player, int) : void
            {method} + reserveComponent(Player) : void
            {method} + discardComponent(Player, int) : void
            {method} + toggleHourglass(Player) : void
            {method} + removeComponent(Player, ShipCoords coords) : void
            {method} + setCrewType(Player, ShipCoords coords, AlienType type) : void
            {method} + giveUp(Player) : void
            {method} + selectBlob(Player, ShipCoords) : void
            {method} + getCardState(Player) : CardState
        }

        GameState ^... WaitingState
        class WaitingState {
            {field} - [final] connected : List<ClientDescriptor>
            {field} - [final] count : PlayerCount
            {method} + validate(ServerMessage message) : void
            {method} + getNext() : GameState 
            {method} + getClientState() : ClientState 
            {method} + init() : void
            {method} + connect(ClientDescriptor client) : void
            {method} + disconnect(ClientDescriptor client) : void
        }

        GameState^--ResumeWaitingState
        class ResumeWaitingState {
            {field} - [final] next : GameState
            {field} - [final] awaiting : HashMap<String, ClientDescriptor>
            {field} - [final] count : PlayerCount
            {method} + validate(ServerMessage message) : void
            {method} + getNext() : GameState
            {method} + getClientState() : ClientState
            {method} + init() : void
            {method} - resumeState() : void
            {method} + toSerialize() : boolean
            {method} + connect(ClientDescriptor) : void
            {method} + disconnect(ClientDescriptor) : void
            {method} + toString() : String
            {method} + getOngoingEntry(int) : ClientGameListEntry
        }

        GameState ^... ConstructionState
        abstract ConstructionState <<abstract>> {
            {field} [final] board : iCommonBoard
            {field} [final] voyage_deck : iCards
            {field} [final] building : ArrayList<Player>
            {field} [final] finished : ArrayList<Player>
            {field} [final] current_tile : HashMap<Player, BaseComponent>
            {field} [final] hoarded_tile : HashMap<Player, ArrayList<BaseComponent>>
            {method} + validate(ServerMessage message) : void
            {method} + getNext() : GameState 
            {method} + getClientState() : ClientState 
            {method} + init() : void
            {method} + connect(Player) : void
            {method} + disconnect(Player) : void
            {method} + sendContinue(Player) : void
            {method} + putComponent(Player, ShipCoords coords) : void
            {method} + takeComponent(Player) : void
            {method} + takeDiscarded(Player, int id) : void
            {method} + discardComponent(Player, int id) : void
            {method} + toSerialize() : boolean
            {method} + toString() : String
            {method} + getCurrent(Player) : BaseComponent
            {method} + getHoarded : ArrayList<BaseComponent>
            {method} + getDiscarded() : ArrayList<Integer>
            {method} + getOngoingEntry(int) : ClientGameListEntry
        }

        ConstructionState^--TestFlightConstructionState
        class TestFlightConstructionState {
            {method} + getClientState : ClientState
        }

        ConstructionState^--LevelTwoConstructionState
        class LevelTwoConstructionState {
            {field} [final] hourglass : ConstructionStateHourglass
            {method} + init() : void
            {method} + getClientState() : ClientState
            {method} + sendContinue(Player) : void
            {method} + putComponent(Player, int, ShipCoords, ComponentRotation) : void
            {method} + takeComponent(Player) : void
            {method} + takeDiscarded(Player, int) : void
            {method} + discardComponent(Player) ; void
            {method} + toggleHourglass(player) : void
        }

        class ConstructionStateHourglass {
            {field} [final] period : Duration
            {field} toggled : Instant
            {field} [final] total : int
            {field} times : int
            {method} + timesTotal() : int
            {method} + timesLeft() : int
            {method} + getDuration() : Duration
            {method} + start() : void
            {method} + toggle() : void
            {method} + canAct() : boolean
            {method} + isRunning() : boolean
            {method} + getInstant() : Instant
        }

        GameState ^... VerifyState
        class VerifyState {
            {field} - [final] voyage_deck : iCards 
            {field} - [final] to_remove_broken : ArrayList<Player>
            {field} - [final] to_choose_blob : ArrayList<Player>
            {field} - [final] finish_order : ArrayList<Player>
            {field} - [final] awaiting : ArrayList<Player>
            {field} - [final] starts_losing : ArrayList<Player>
            {method} + validate(ServerMessage message) : void
            {method} + getNext() : GameState 
            {method} + getClientState() : ClientState 
            {method} + init() : void
            {method} + connect(Player) : void
            {method} + disconnect(Player) : void
            {method} + sendContinue(Player) : void
            {method} + removeComponent(Player, ShipCoords coords) : void
            {method} + setCrewType(Player, ShipCoords coords, AlienType type) : void
            {method} + toSerialize : boolean
            {method} + selectBlob(Player, ShipCoords) : void
            {method} + toString() : String
            {method} + getOngoingEntry(int) : ClientGameListEntry
        }

        GameState ^... VoyageState
        class VoyageState {
            {field} - [final] planche : iPlanche 
            {field} - [final] voyage_deck : iCards 
            {field} - [final] to_give_up : ArrayList<Player>
            {field} - card : iCard 
            {field} - state : CardState state
            {method} + validate(ServerMessage message) : void
            {method} + getNext() : GameState 
            {method} + getClientState() : ClientState 
            {method} + init() : void
            {method} + connect(Player) : void
            {method} + disconnect(Player) : void
            {method} + giveUp(Player) : void
            {method} + getCardState(Player) : CardState
            {method} + loseGame(Player) : void
            {method} + getAllConnectedPlayers() : List<Player> 
            {method} + getOrder(CardOrder) : List<Player>
            {method} + findCriteria(CombatZoneCriteria) : Player
            {method} + getPlanche() : iPlanche 
            {method} + setCardState(CardState) : void
            {method} + toSerialize() : boolean
            {method} + toString() : String
            {method} + getOngoingEntry(int) : ClientGameListEntry
        }

        GameState ^... EndscreenState
        class EndscreenState {
            {field} - [final] awaiting : List<Player> 
            {field} - [final] order_arrival : List<Player> 
            {method} + validate(ServerMessage message) : void
            {method} + getNext() : GameState 
            {method} + getClientState() : ClientState 
            {method} + init() : void
            {method} + sendContinue(Player) : void
            {method} + disconnect(Player) : void
            {method} + toSerialize() : boolean
            {method} + toString() : boolean
            {method} + getOngoingEntry(int) : ClientGameListEntry
        }
        
    }


    State::GameState "1" <-- ModelInstance:state 
    class ModelInstance {
        {field} - [final] controller : ServerController 
        {method} + validate(ServerMessage message) : void
        {method} + startGame(List<Player> players) : void
        {method} + getState() : GameState
        {method} + setState(GameState new_state) : void
        {method} + connect(ClientDescriptor client) : void
        {method} + disconnect(ClientDescriptor client) : void
        {method} + kick(ClientDescriptor client) : void
    }

    package Client {
        
        package Card {
            
            interface ClientCardState <<interface>> {
                {method} showCardState(ClientView) : void
            }

            ClientCardState ^.. ClientBaseCardState
            class ClientBaseCardState {
                {field} - [final] id : int
                {field} - [final] state : String
                {method} + getState() : String
                {method} + getID() : int
                {method} + showCardState(ClientCardStateVisitor) : void
            }

            ClientCardState ^.. ClassAwaitConfirmCardStateDecorator
            ClientBaseCardState <-- ClassAwaitConfirmCardStateDecorator:base
            class ClientAwaitConfirmCardStateDecorator {
                {field} - [final] base : ClientCardState
                {field} - [final] awaiting : List<PlayerColor> 
                {method} + getAwaiting() : List<PlayerColor> 
                {method} + showCardState(ClientCardStateVisitor) : void
            }

            ClientCardState ^.. ClientCargoPenaltyCardStateDecorator
            ClientBaseCardState <-- ClientCargoPenaltyCardStateDecorator:base
            class ClientCargoPenaltyCardStateDecorator {
                {field} - [final] base : ClientCardState
                {field} - [final] turn : PlayerColor 
                {field} - [final] shipments : int[] 
                {method} + getTurn() : PlayerColor 
                {method} + getShipments() : int[] 
                {method} + showCardState(ClientCardStateVisitor) : void
            }
            
            ClientCardState ^.. ClientCargoRewardCardStateDecorator
            ClientBaseCardState <-- ClientCargoRewardCardStateDecorator:base
            class ClientCargoRewardCardStateDecorator {
                {field} - [final] base : ClientCardState
                {field} - [final] turn : PlayerColor 
                {field} - [final] days_taken : int 
                {field} - [final] shipments : int[] 
                {method} + getTurn() : PlayerColor
                {method} + getDaysTaken() : int
                {method} + getShipments() : int[] 
                {method} + showCardState(ClientCardStateVisitor) : void
            } 
            
            ClientCardState ^.. ClientCombatZoneIndexCardStateDecorator
            ClientBaseCardState <-- ClientCombatZoneIndexCardStateDecorator:base
            class ClientCombatZoneIndexCardStateDecorator {
                {field} - [final] base : ClientCardState
                {field} - [final] index : int
                {method} + getSection() : CombatZoneSection
                {method} + getIndex() : int
                {method} + showCardState(ClientView) : void
            }
            
            ClientCardState ^.. ClientCreditsRewardCardStateDecorator
            ClientBaseCardState <-- ClientCreditsRewardCardStateDecorator:base
            class ClientCreditsRewardCardStateDecorator {
                {field} - [final] base : ClientCardState
                {field} - [final] turn : PlayerColor 
                {field} - [final] credits : int 
                {field} - [final] days_taken : int 
                {method} + getTurn() : PlayerColor
                {method} + getCredits() : int
                {method} + getDaysTaken() : int 
                {method} + showCardState(ClientView) : void
            }
            
            ClientCardState ^.. ClientCrewPenaltyCardStateDecorator
            ClientBaseCardState <-- ClientCrewPenaltyCardStateDecorator:base
            class ClientCrewPenaltyCardStateDecorator {
                {field} - [final] base : ClientCardState
                {field} - [final] turn : PlayerColor 
                {field} - [final] days_taken : int 
                {method} + getTurn() : PlayerColor
                {method} + getCrewLost() : int
                {method} + showCardState(ClientView) : void
            }
            
            ClientCardState ^.. ClientLandingCardStateDecorator
            ClientBaseCardState <-- ClientLandingCardStateDecorator:base
            class ClientLandingCardStateDecorator {
                {field} - [final] base : ClientCardState
                {field} - [final] turn : PlayerColor 
                {field} - [final] days_taken : int 
                {field} - [final] crew_needed: int 
                {field} - [final] available : List<Boolean>
                {method} + getTurn() : PlayerColor
                {method} + getDaysTaken() : int
                {method} + getCrewNeeded() : int
                {method} + getAvailable() : List<Boolean>
                {method} + showCardState(ClientView) : void
            }
            
            ClientCardState ^.. ClientMeteoriteCardStateDecorator 
            ClientBaseCardState <-- ClientMeteoriteCardStateDecorator :base
            class ClientMeteoriteCardStateDecorator  {
                {field} - [final] meteorite : Projectile
                {method} + getProjectile() : Projectile
                {method} + showCardState(ClientView) : void
            }

            ClientCardState ^.. ClientNewCenterCardStateDecorator
            ClientBaseCardState <-- ClientNewCenterCardStateDecorator:base
            class ClientNewCenterCardStateDecorator {
                {field} - [final] base : ClientCardState
                {field} - [final] awaiting : List<PlayerColor>
                {method} + getAwaiting() : List<PlayerColor>
                {method} + showCardState(ClientView) : void
            }
            
            ClientCardState ^.. ClientProjectileCardStateDecorator
            ClientBaseCardState <-- ClientProjectileCardStateDecorator:base
            class ClientProjectileCardStateDecorator {
                {field} - [final] base : ClientCardState
                {field} - [final] shot : Projectile
                {method} + getProjectile() : Projectile
                {method} + showCardState(ClientView) : void
            }
        
        }
        
        package Components {
            
            interface ClientComponent <<interface>> {
                {method} + showComponent(ClientComponentVisitor) : void
            }

            interface ClientComponentVisitor <<interface>> {
                {method} + show(ClientComponent) : void
            }

            ClientComponent ^.. ClientBaseComponent
            class ClientBaseComponent {
                {field} - [final] id : int
                {field} - [final] rotation : ComponentRotation
                {field} - [final] connectors : ConnectorType[]
                {method} + getConnectors(ComponentRotation) : ConnectorType
                {method} + getId() : int 
                {method} + getRotation() : ComponentRotation 
                {method} + showComponent(ClientComponentVisitor) : void
            }
            
            ClientComponent ^.. ClientBatteryComponentDecorator
            ClientBaseComponent <-- ClientBatteryComponentDecorator:base
            class ClientBatteryComponentDecorator {
                {field} - [final] base : ClientComponent
                {field} - [final] batteries : int
                {method} + getBase() : ClientComponent
                {method} + getBatteries() : int
                {method} + showComponent(ClientComponentVisitor) : void
            }

            ClientComponent ^.. ClientCrewComponentDecorator
            ClientBaseComponent <-- ClientCrewComponentDecorator:base
            class ClientCabinComponentDecorator {
                {field} - [final] base : ClientComponent
                {field} - [final] type : AlienType 
                {field} - [final] crew : int
                {field} - [final] base : ClientComponent
                {method} + getBase() : ClientComponent
                {method} + getAlienType() : AlienType
                {method} + getCrew() : int
                {method} + showComponent(ClientComponentVisitor) : void
            }

            ClientComponent ^.. ClientCannonComponentDecorator
            ClientBaseComponent <-- ClientCannonComponentDecorator:base
            class ClientCannonComponentDecorator {
                {field} - [final] rotation : ComponentRotation
                {field} - [final] base : ClientComponent
                {method} + getBase() : ClientComponent
                {method} + getRotation() : ComponentRotation
                {method} + showComponent(ClientComponentVisitor) : void
            }

            ClientComponent^..ClientEmptyComponent
            class ClientEmptyComponent {
                {method} + showComponent(ClientComponentVisitor) : void
            }


            ClientComponent ^.. ClientEngineComponentDecorator
            ClientBaseComponent <-- ClientEngineComponentDecorator:base
            class ClientEngineComponentDecorator {
                {field} - [final] base : ClientComponent
                {field} - [final] rotation : ComponentRotation
                {method} + getBase() : ClientComponent
                {method} + getRotation() : ComponentRotation
                {method} + showComponent(ClientComponentVisitor) : void
            }


            ClientComponent ^.. ClientLifeSupportComponentDecorator
            ClientBaseComponent <-- ClientLifeSupportComponentDecorator:base
            class ClientLifeSupportComponentDecorator {
                {field} - [final] base : ClientComponent
                {field} - [final] type : AlienType
                {method} + getBase() : ClientComponent
                {method} + getAlienType() : AlienType
                {method} + showComponent(ClientComponentVisitor) : void
            }

            ClientComponent ^.. ClientPoweredComponentDecorator 
            ClientBaseComponent <-- ClientPoweredComponentDecorator:base
            class ClientPoweredComponentDecorator {
                {field} - [final] powered : boolean
                {field} - [final] base : ClientComponent
                {method} + getBase() : ClientComponent
                {method} + getPowered() : boolean
                {method} + showComponent(ClientComponentVisitor) : void
            }

            class ClientShieldComponentDecorator {
                {field} - [final] base : ClientComponent
                {field} - [final] type : ShieldType
                {method} + getBase() : ClientComponent
                {method} + getType() : ShieldType
                {method} + showComponent(ClientComponentVisitor) : void
            }

            ClientComponent ^.. ClientShipmentComponentDecorator
            ClientBaseComponent <-- ClientShipmentComponentDecorator:base
            class ClientShipmentsComponentDecorator {
                {field} - [final] shipments : int[]
                {field} - [final] base : ClientComponent
                {method} + getBase() : ClientComponent
                {method} + getShipments() : int[]
                {method} + showComponent(ClientComponentVisitor) : void
            }

            ClientComponent ^.. ClientBrokenVerifyComponentDecorator
            ClientBaseComponent <-- ClientBrokenVerifyComponentDecorator:base
            class ClientBrokenVerifyComponentDecorator {
                {field} - [final] base : ClientComponent
                {method} + getBase() : ClientComponent
                {method} + showComponent(ClientComponentVisitor) : void
            }

            class ClientSpaceShip {
                {field} - [final] type : GameModeType 
                {field} - [final] ship : ClientComponent[][] 
                {field} - [final] boolean[] shielded;
                {field} - [final] cannon_power : int
                {field} - [final] engine_power : int
                {field} - [final] containers : int[]
                {field} - [final] crew : int[]
                {method} + getVerifyShip(VerifyResult[][]) : ClientSpaceShip
                {method} + getType() : GameModeType
                {method} + getComponent(ShipCoords) : ClientComponent
                {method} + getShielded() : boolean[]
                {method} + getCannonPower() : int
                {method} + getEnginePower() : int
                {method} + getEnergyPower() : int
                {method} + getCrew() : int[]
            }

        }

        package Player {

            class ClientWaitingPlayer {
                {field} - [final] username : String
                {field} - [final] color : PlayerColor
                {method} + getUsername() : String
                {method} + getColor() : PlayerColor
            }
            
            ClientSpaceShip <-- ClientConstructionPlayer:ship
            class ClientConstructionPlayer {
                {field} - [final] username : String
                {field} - [final] color : PlayerColor
                {field} - [final] ship : ClientSpaceShip
                {field} - [final] reserved_components : ArrayList<Integer>
                {field} - [final] boolean : finished
                {field} - [final] current_component : int
                {method} + getUsername() : String
                {method} + getColor() : PlayerColor
                {method} + getShip() : ClientSpaceShip
                {method} + getReserved() : List<Integer> 
                {method} + isFinished() : boolean
                {method} + getCurrent() : int
            }

            ClientSpaceShip <-- ClientVerifyPlayer:ship
            class ClientVerifyPlayer {
                {field} - [final] username : String
                {field} - [final] color : PlayerColor
                {field} - [final] ship : ClientSpaceShip
                {field} - [final] finished : boolean
                {field} - [final] order : int
                {method} + getUsername() : String
                {method} + getColor() : PlayerColor
                {method} + getShip() : ClientSpaceShip
                {method} + isFinished() : boolean
                {method} + getOrder() : int
            }

            ClientSpaceShip <-- ClientVoyagePlayer:ship
            class ClientVoyagePlayer {
                {field} - [final] username : String
                {field} - [final] color : PlayerColor
                {field} - [final] ship : ClientSpaceShip
                {field} - [final] planche_slot : int
                {field} - [final] credits : int
                {field} - [final] disconnected : boolean
                {field} - [final] retired_lost : boolean
                {method} + getVerifyShip(VerifyResult[][]) : ClientSpaceShip
                {method} + getUsername() : String
                {method} + getColor() : PlayerColor
                {method} + getShip() : ClientSpaceShip
                {method} + getPlancheSlot() : int
                {method} + getCredits() : int
                {method} + getDisconnected() : boolean
                {method} + getRetired() : boolean
            }

            class ClientEndgamePlayer {
                {field} - [final] username : String
                {field} - [final] color : PlayerColor
                {field} - [final] planche_slot : int
                {field} - [final] credits : int
                {field} - [final] shipments : int[]
                {method} + getUsername() : String
                {method} + getColor() : PlayerColor
                {method} + getPlanche_slot() : int
                {method} + getCredits() : int
                {method} + getShipments() : int[]
            }

        }

        package State {
            
            interface ClientState <<interface>> {
                {method} + sendToView(ClientView) : void
            }

            ClientState ^.. ClientSetupState
            class ClientSetupState {
                {field} - [final] setupper_name : String
                {field} - [final] unfinished_games : ArrayList<ClientGameListEntry>
                {method} + getSetupperName() : String
                {method} + getUnfinishedList() : ArrayList<ClientGameListEntry>
                {method} + sendToView(ClientView) : void
            }

            ClientState ^.. ClientLobbySelectState
            class ClientLobbySelectState {
                {field} - [final] unfinished_games : ArrayList<ClientGameListEntry>
                {method} + getLobbyList() : ArrayList<ClientGameListEntry>
                {method} + sendToView(ClientView) : void
            }

            ClientState ^.. ClientWaitingRoomState
            class ClientWaitingRoomState {
                {field} - [final] type : GameModeType
                {field} - [final] count : PlayerCount
                {field} - [final] playerlist : ArrayList<ClientWaitingPlayer>
                {method} + getType() : GameModeType
                {method} + getCount() : PlayerCount
                {method} + getPlayerList() : List<ClientWaitingPlayer>
                {method} + sendToView(ClientView) : void 
            }

            ClientState ^.. ClientConstructionState
            class ClientConstructionState {
                {field} - [final] type : GameModeType
                {field} - [final] playerlist : ArrayList<ClientConstructionPlayer>
                {field} - [final] construction_cards : ArrayList<Integer>
                {field} - [final] discarded_tiles : ArrayList<Integer>
                {field} - [final] tiles_left : int
                {field} - [final] toggles_total : int
                {field} - [final] toggles_left : int
                {field} - [final] hourglass_duration : Duration
                {field} - [final] last_hourglass_toggle : Instant 
                {method} + getType() : GameModeType
                {method} + getPlayerList() : List<ClientConstructionPlayer> 
                {method} + getConstructionCards() : List<Integer> 
                {method} + getDiscardedTiles() : List<Integer> 
                {method} + getTilesLeft() : int
                {method} + getTogglesTotal() : int
                {method} + getTogglesLeft() : int
                {method} + getHourglassDuration() : Duration
                {method} + getLastToggle() : Instant
                {method} + sendToView(ClientView) : void 
            }

            ClientState ^.. ClientVerifyState
            class ClientVerifyState {
                {field} - [final] players : ArrayList<ClientVerifyPlayer>
                {method} + getPlayers() : ArrayList<ClientVerifyPlayer>
                {method} + sendToView(ClientView) : void  
            }

            ClientState ^.. ClientVoyageState
            class ClientVoyageState {
                {field} - [final] type : GameModeType
                {field} - [final] playerlist : ArrayList<ClientVoyagePlayer>
                {field} - [final] card_state : ClientCardState 
                {method} + getType() : GameModeType
                {method} + getPlayerList() : ArrayList<ClientVoyagePlayer>
                {method} + getCardState() : ClientCardState 
                {method} + sendToView(ClientView) : void 
            }

            ClientState ^.. ClientEndgameState
            class ClientEndgameState {
                {field} - [final] playerlist : ArrayList<ClientEndgamePlayer>
                {method} + getPlayerList() : List<ClientEndgamePlayer>
                {method} + sendToView(ClientView) : void 
            }

        }

        class ClientGameListEntry {
            {field} - [final] players : ArrayList<String>
            {field} - [final] model_id : int
            {field} - [final] type : GameModeType
            {field} - [final] count : PlayerCount
            {field} - [final] state : String
            {method} + getType() : GameModeType
            {method} + getCount() : PlayerCount
            {method} + getPlayers() : ArrayList<String>
            {method} + getModelId() : int
            {method} + getState() : String
        }

    }
 
}


@enduml

'⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣤⣤⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣀⣀⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
'⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣾⣿⣿⣿⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣼⣿⣿⣿⡄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
'⠀⠀⠀⠀⠀⠀⠀⠀⢀⣾⣿⣿⣿⣿⣷⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣼⣿⣿⣿⣿⣿⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀
'⠀⠀⠀⠀⠀⠀⠀⠀⣾⣿⣿⣿⣿⣿⣿⣧⠀⠀⠀⠀⠀⠀⠀⠀⠀⢰⣿⣿⣿⣿⣿⣿⣧⠀⠀⠀⠀⠀⠀⠀⠀⠀
'⠀⠀⠀⠀⠀⠀⠀⣼⣿⣿⣿⣿⣿⣿⣿⣿⣇⠀⠀⠀⠀⠀⠀⠀⢀⣿⣿⣿⣿⣿⣿⣿⣿⡆⠀⠀⠀⠀⠀⠀⠀⠀
'⠀⠀⠀⠀⠀⠀⢰⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡄⠀⠀⠀⠀⠀⠀⣼⣿⣿⣿⣿⣿⣿⣿⣿⣷⠀⠀⠀⠀⠀⠀⠀⠀
'⠀⠀⠀⠀⠀⢀⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣧⠀⠀⠀⠀⠀⢰⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡇⠀⠀⠀⠀⠀⠀⠀
'⠀⠀⠀⠀⠀⢸⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡄⠀⠀⠀⢀⣾⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣇⠀⠀⠀⠀⠀⠀⠀
'⠀⠀⠀⠀⠀⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠀⠀⠀⠀⠀⠀⠀
'⠀⠀⠀⠀⢀⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠀⠀⠀⠀⠀⠀⠀
'⠀⠀⠀⠀⢸⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠀⠀⠀⠀⠀⠀⠀
'⠀⠀⠀⠀⠈⣿⣿⣿⣿⣿⣿⠟⠉⠀⠀⠀⠙⢿⣿⣿⣿⣿⣿⣿⣿⡿⠋⠀⠀⠙⢻⣿⣿⣿⣿⠀⠀⠀⠀⠀⠀⠀
'⠀⠀⠀⠀⠀⣿⣿⣿⣿⣿⠃⠀⠀⠀⠀⣠⣄⠀⢻⣿⣿⣿⣿⣿⡿⠀⣠⣄⠀⠀⠀⢻⣿⣿⣏⠀⠀⠀⠀⠀⠀⠀
'⠀⠀⠀⠀⠀⣾⣿⣿⣿⣿⠀⠀⠀⠀⠰⣿⣿⠀⢸⣿⣿⣿⣿⣿⡇⠀⣿⣿⡇⠀⠀⢸⣿⣿⣿⠀⠀⠀⠀⠀⠀⠀
'⠀⠀⠀⠀⠀⣿⣿⣿⣿⣿⣄⠀⠀⠀⠀⠙⠃⠀⣼⣿⣿⣿⣿⣿⣇⠀⠙⠛⠁⠀⠀⣼⣿⣿⣿⡇⠀⠀⠀⠀⠀⠀
'⠀⠀⠀⠀⠀⣿⣿⣿⣿⣿⣿⣷⣤⣄⣀⣠⣤⣾⣿⣿⣿⣿⣽⣿⣿⣦⣄⣀⣀⣤⣾⣿⣿⣿⣿⠃⠀⠀⢀⣀⠀⠀
'⠰⡶⠶⠶⠶⠿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡟⠛⠉⠉⠙⠛⠋⠀
'⠀⠀⢀⣀⣠⣤⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡿⠷⠶⠶⠶⢤⣤⣀⠀
'⠀⠛⠋⠉⠁⠀⣀⣴⡿⢿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣯⣤⣀⡀⠀⠀⠀⠀⠘⠃
'⠀⠀⢀⣤⡶⠟⠉⠁⠀⠀⠉⠛⠿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠿⠟⠉⠀⠀⠀⠉⠙⠳⠶⣄⡀⠀⠀
'⠀⠀⠙⠁⠀⠀⠀⠀⠀⠀⠀⠀⢰⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡏⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠉⠁⠀⠀
'⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢠⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣷⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
'⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣾⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
'⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣼⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
'⠀⠀⠀⠀⠀⠀⠀⠀⠀⣸⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣷⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
'⠀⠀⠀⠀⠀⠀⠀⠀⣴⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡆⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
'⠀⠀⠀⠀⠀⠀⠀⣴⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
'⠀⠀⠀⠀⠀⠀⣰⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡆⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
'⠀⠀⠀⠀⠀⢰⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣷⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
'⠀⠀⠀⠀⢀⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
'⠀⠀⠀⠀⣸⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣷⠀⠀⠀