@startuml controller
hide circle
skinparam classFontStyle bold
skinparam groupInheritance 1
set separator ::
skinparam classAttributeIconSize 12



' format unfinished games: list form
' 1 - game_id - num_players - player_name_0, .. , player_name_num_players-1.

package Controller {

    package Client {

        package Connections {

            enum ConnectionType <<enum>> {
                SOCKET
                RMI
                NONE
            }

            interface ServerConnection <<interface>> {
                {method} sendMessage(ServerMessage) : void
                {method} close() : void
                {method} getShutdownHook() : Thread
            }

            ServerConnection ^.. SocketConnection
            class SocketConnection {
                {field} - [final] inqueue : ThreadSafeMessageQueue<ClientMessage)
                {field} - [final] socket : Socket
                {field} - [final] out : ObjectOutputStream
                {field} - [final] in : ObjectInputStream
                {method} + run() : void
                {method} + sendMessage(ServerMessage) : void
                {method} + close() : void
                {method} + getShutdownHook() : Thread
            }

            ServerConnection ^.. RMIConnection
            class RMIConnection {
                {field} - [final] stup RMIClientStub
                {field} - [final] server VirtualServer
                {method} + sendMessage(ServerMessage) : void
                {method} + close() : void
                {method} + getShutdownHook() : Thread
            }

            class RMIClientStub {
                {field} - [transient] [final] inqueue ThreadSafeMessageQueue<ClientMessage>
                {field} - [final] username : String
                {method} + sendMessage(ServerMessage) : void
                {method} + close() : void
                {method} + getUsername() : String
            }

        }

        package State {
            
            Controller::Client::ClientController "1" -- ClientControllerState:controller
            View::ClientView "1" -u- ClientControllerState:view
            abstract ClientControllerState <<abstract>> {
                {method} # init() : void
                {method} # getNext() : ClientControllerState
                {method} # transition() : void
                {method} # getView() : ClientView
                {method} + onClose() : void
                {method} + setUsername(String) : void
                {method} + connect(String, int, ConnectionType) : void
                {method} + sendMessage(ServerMessage) : void
                {method} + disconnect() : void
            }

            ClientControllerState ^.. ConnectingState
            Controller::Client::Connections::ServerConnection "1" -- ConnectedState:connection
            class ConnectedState {
                {field} - [final] outqueue : ThreadSafeMessageQueue<ServerMessage>
                {field} - [final] username : String
                {field} - [final] consumer_thread : Thread
                {field} - [final] sender_thread : Thread
                {field} - [final] shutdown_hook : Thread
                {field} - [final] input_thread : Thread
                {field} - [final] pingtimer : Timer
                {method} + init() : void
                {method} + getNext() : ClientControllerState
                {method} + onClose() : void
                {method} + sendMessage(ServerMessage) : void
                {method} + disconnect() : void
                {method} + getView() : ClientView
                {method} + getUsername() : String
                {method} + showTextMessage(String) : void
                {method} - startPingTask() : void
                {method} - stopPingTask() : void
                {method} - getPingTask(ConnectedState) : TimerTask
                {method} - ping() : void
                {method} - getShutdownHook() : Thread
            }

            ClientControllerState ^.. ConnectingState
            Controller::Client::Connections::ServerConnection "1" -- ConnectingState:connection
            class ConnectingState {
                {field} - [final] username : String
                {field} - [final] inqueue : ThreadSafeMessageQueue<ServerMessage>
                {method} + init() : void
                {method} + getController() : ClientController
                {method} + getNext() : ClientControllerState
                {method} + connect(String, int, ConnectionType) : void
            }

            ClientControllerState ^.. TitleScreenState
            class TitleScreenState {
                {field} - [final] username : String
                {method} + init() : void
                {method} + getNext() : ClientControllerState
                {method} + setUsername(String) : void
                {method} + exit() : void
                {method} + validateUsername(String) : boolean
            }
        
        }

        View::ClientView "1" -- ClientController:view
        Controller::Client::State::ClientControllerState "1" -- ClientController:state
        class ClientController {
            {field} - [final] closed : boolean
            {method} + getState() : ClientControllerState
            {method} + setState(ClientControllerState) : void
            {method} + close() : void
            {method} + getClosed() : boolean
            {method} + reset() : void
        }

        Controller::Client::State::ConnectedState "1" -- ConsumerThread:state
        class ConsumerThread {
            {field} - [final] inqueue : ThreadSafeMessageQueue<ClientMessage>
            {method} + run() : void
        }

        Controller::Client::Connections::ServerConnection "1" -- SenderThread:connection
        Controller::Client::State::ConnectedState "1" -- SenderThread:state
        class SenderThread {
            {field} - [final] outqueue : ThreadSafeMessageQueue<ClientMessage>
            {method} + run() : void
        }

    }

    package Server{

        package Connections {

            interface ClientConnection <<interface>> {
                {method} sendMessage(ClientMessage) : void
                {method} close() : void
            }

            interface RMIClientConnection <<interface>> {
                {method} getUsername() : String
            }

            interface RMISkeletonProvider <<interface>> {
                {method} accept(RMIClientConnection) : VirtualServer
            }

            interface VirtualServer <<interface>> {
                {method} receiveMessage(ServerMessage) : void
            }

            RMISkeletonProvider ^.. NetworkServer
            class NetworkServer {
                {field} - [final] serverPool : ExecutorService
                {field} - ip : String
                {field} - tcpport : int
                {field} - rmiport : int
                {field} - init : boolean
                {field} - server : ServerSocket
                {method} + init(String, int, int) : void
                {method} + init(String, int) : void
                {method} + startServer() : void
                {method} + run() : void
                {method} + RMICleanup() : Thread
                {method} + TCPCleanup() : Thread
                {method} + accept(RMIClientConnection) : VirtualServer
            }

            VirtualServer ^.. RMIServerStubImpl
            Controller::Server::MainServerController "1" -- RMIServerStubImpl:controller
            Controller::Server::ClientDescriptor "1" -- RMIServerStubImpl:client
            class RMIServerStubImpl {
                {method} + receiveMessage(ServerMessage) : void
            }

            ClientConnection ^.. SocketClient
            class SocketClient {
                {field} - [final] socket : Socket
                {field} - [final] out : ObjectOutputStream
                {field} - [final] in : ObjectInputStream
                {field} - setup_timeout : TimerTask
                {field} - username : String
                {method} + setTimeout(TimerTask) : void
                {method} + cancelTimeout() : void
                {method} + getSocket() : Socket
                {method} + run() : void
                {method} + sendMessage(ClientMessage) : void
                {method} + readSetup() : void
                {method} + read() : void
                {method} + close() : void
            }

        }


        Controller::Server::MainServerController "static" -- MainServerController:instance
        Controller::Server::Connections::NetworkServer "1" -- MainServerController:server
        class MainServerController <<singleton>> {
            {field} - [final] all_listeners : HashMap<String, ClientDescriptor> 
            {field} - [final] lob_listeners : HashMap<String, ClientDescriptor> 
            {field} - [final] stp_listeners : HashMap<String, ClientDescriptor> 
            {field} - [final] disconnected : HashMap<String, Integer> 
            {field} - [final] to_setup_tcp : List<SocketClient> 
            {field} - [final] listeners_lock : Object 
            {field} - [final] queue : ThreadSafeMessageQueue<ServerMessage> 
            {field} - [final] lobbies_lock : Object 
            {field} - [final] saved_lock : Object 
            {field} - [final] lobbies : HashMap<Integer, LobbyController> 
            {field} - [final] saved : HashMap<Integer, ModelInstance>
            {field} - init : boolean
            {field} - next_id : int
            {method} + [static] getInstance() : MainServerController
            {method} + [static] reset() : void
            {method} + init(String, int, int) : void
            {method} + run() : void
            {method} + receiveMessage(ServerMessage) : void
            {method} + broadcast(ClientMessage) : void
            {method} + sendMessage(ClientDescriptor, ClientMessage) : void
            {method} + getDescriptor(String) : ClientDescriptor
            {method} + connectListener(SocketClient) : void
            {method} + setupSocketListener(SocketClient, String) : void
            {method} + connectListener(RMIClientConnection) : ClientDescriptor 
            {method} + getStub(ClientDescriptor) : VirtualServer
            {method} - validateUsername(String) : boolean 
            {method} + connect(ClientDescriptor) : void
            {method} + disconnect(ClientDescriptor) : void
            {method} + addDisconnected(String, int) : void
            {method} + removeDisconnected(String) : void
            {method} + ping(ClientDescriptor) : void
            {method} - TCPTimeoutTask(MainServerController, SocketClient) : TimerTask
            {method} - timeoutTask(MainServerController, ClientDescriptor) : TimerTask
            {method} + getNext() : int
            {method} + updateUnfinishedList() : void
            {method} + enterSetup(ClientDescriptor) : void
            {method} + leaveSetup(ClientDescriptor) : void
            {method} + openNewRoom(ClientDescriptor, GameModeType, PlayerCount) : void
            {method} + openUnfinished(ClientDescriptor, int) : void
            {method} + gameFinishCleanup(int) : void
            {method} + connectToLobby(ClientDescriptor, int) : void
            {method} + notifyLobbyListeners() : void
            {method} + getLobbyList() : ArrayList<ClientGameListEntry> 
            {method} + joinFromEndedGame(ClientDescriptor) : void
        }


        }

        Model::ModelInstance "1" -- LobbyController:model
        class LobbyController {
            {field} - [final] id : int
            {field} - [final] listeners : HashMap<String, ClientDescriptor>
            {field} - [final] disconnected_usernames : HashMap<String, Player>
            {field} - [final] listeners_lock : Object
            {field} - [final] queue : ThreadSafeMessageQueue<ServerMessage> 
            {field} - [final] serializer_path : String
            {field} - [final] model_lock : Object
            {field} - dsctimer : Timer
            {method} + getID() : int
            {method} + run() : void
            {method} + receiveMessage(ServerMessage)  : void
            {method} + broadcast(ClientMessage) : void
            {method} + sendMessage(ClientDescriptor, ClientMessage) : void
            {method} + getModel() : ModelInstance
            {method} + setModel(ModelInstance) : void
            {method} + serializeCurrentGame() : void
            {method} + endGame() : void
            {method} - getEndMatchTask(LobbyController) : TimerTask
            {method} + connect(ClientDescriptor) : void
            {method} + disconnect(ClientDescriptor)  : void
            {method} + disconnectProcedure(ClientDescriptor) : void
            {method} + getClientInfo() : ClientGameListEntry
            {method} + ping(ClientDescriptor) : void
        }

        class ClientDescriptor{
            {field} - username: String
            {field} - color : PlayerColor
            {field} - disconnected : boolean
            {method} + getUsername() : String
            {method} + getColor() : PlayerColor
            {method} + getDisconnected() : boolean
            {method} + sendMessage(ClientMessage m) : void
        }

    }

    class ThreadSafeMessageQueue<T> {
        {field} - [final] threadpool : ExecutorService
        {field} - [final] queue ArrayBlockingQueue<T>
        {method} + take() : T
        {method} + insert(T) : void
    }

    Server::Connections::RMIClientConnection .. RMIClientStub

    package Message{
        '//TODO: muovi e metti in controller i messaggi che ha senso

        interface Message <<interface, serializable>>

        Message ^------ ServerMessage::ServerMessage
        package ServerMessage{
            abstract ServerMessage <<abstract>> {

            }

            ServerMessage ^..... DiscardCargoMessage
            class DiscardCargoMessage {
                {field} - [final] coords : ShipCoords
                {field} - [final] type : ShipmentType
                {method} + receive(MainServerController) : void
                {method} + receive(LobbyController) : void
                {method} + receive(ModelInstance) : void
                {method} + receive(GameState) : void
                {method} + receive(CardState) : void
            }

            ServerMessage ^... EnterLobbyMessage
            class EnterLobbyMessage {
                {field} - [final] id : int
                {method} + receive(MainServerController) : void
            }

            ServerMessage ^..... EnterSetupMessage
            class EnterSetupMessage {
                {method} + receive(MainServerController) : void
            }

            ServerMessage ^... LeaveSetupMessage
            class LeaveSetupMessage {
                {method} + receive(MainServerController) : void
            }

            ServerMessage ^..... MoveCargoMessage
            class MoveCargoMessage {
                {field} - [final] target : ShipCoords
                {field} - [final] source : ShipCoords
                {field} - [final] type : ShipmentType
                {method} + receive(MainServerController) : void
                {method} + receive(LobbyController) : void
                {method} + receive(ModelInstance) : void
                {method} + receive(GameState) : void
                {method} + receive(CardState) : void
            }

            ServerMessage ^... OpenLobbyMessage
            class OpenLobbyMessage {
                {field} - [final] count : PlayerCount
                {field} - [final] type : GameModeType
                {method} + receive(MainServerController) : void
            }

            ServerMessage ^..... OpenUnfinishedMessage
            class OpenUnfinishedMessage {
                {field} - [final] id : int
                {method} + receive(MainServerController) : void
            }

            ServerMessage ^... PlayerGiveUpMessage
            class PlayerGiveUpMessage {
                {method} + receive(MainServerController) : void
                {method} + receive(LobbyController) : void
                {method} + receive(ModelInstance) : void
                {method} + receive(GameState) : void
            }

            ServerMessage ^..... PutComponentMessage
            class PutComponentMessage {
                {field} - [final] id : int
                {field} - [final] coords : ShipCoords
                {field} - [final] rotation : ComponentRotation
                {method} + receive(MainServerController) : void
                {method} + receive(LobbyController) : void
                {method} + receive(ModelInstance) : void
                {method} + receive(GameState) : void
            }

            ServerMessage ^... RemoveComponentMessage
            class RemoveComponentMessage {
                {field} - [final] coords : ShipCoords
                {method} + receive(MainServerController) : void
                {method} + receive(LobbyController) : void
                {method} + receive(ModelInstance) : void
                {method} + receive(GameState) : void
            }

            ServerMessage ^..... SelectBlobMessage
            class SelectBlobMessage {
                {field} - [final] blob_coords : ShipCoords
                {method} + receive(MainServerController) : void
                {method} + receive(LobbyController) : void
                {method} + receive(ModelInstance) : void
                {method} + receive(GameState) : void
                {method} + receive(CardState) : void
            }

            ServerMessage ^... SendContinueMessage
            class SendContinueMessage {
                {method} + receive(MainServerController) : void
                {method} + receive(LobbyController) : void
                {method} + receive(ModelInstance) : void
                {method} + receive(GameState) : void
                {method} + receive(CardState) : void
            }

            ServerMessage ^..... DiscardComponentMessage
            class DiscardComponentMessage{
                {method} + receive(MainServerController) : void
                {method} + receive(LobbyController) : void
                {method} + receive(ModelInstance) : void
                {method} + receive(GameState) : void
                {method} + receive(CardState) : void
            }

            ServerMessage ^... ToggleHourglassMessage
            class ToggleHourglassMessage{
                {method} + receive(MainServerController) : void
                {method} + receive(LobbyController) : void
                {method} + receive(ModelInstance) : void
                {method} + receive(GameState) : void
            }

            ServerMessage ^..... ServerConnectMessage
            class ServerConnectMessage {
                {method} + receive(MainServerController) : void
                {method} + receive(LobbyController) : void
                {method} + receive(ModelInstance) : void
                {method} + receive(GameState) : void
            }

            ServerMessage ^... ServerDisconnectMessage
            class ServerDisconnectMessage {
                {method} + receive(MainServerController) : void
                {method} + receive(LobbyController) : void
                {method} + receive(ModelInstance) : void
                {method} + receive(GameState) : void
                {method} + receive(CardState) : void
            }

            ServerMessage ^..... TakeComponentMessage
            class TakeComponentMessage {
                {method} + receive(MainServerController) : void
                {method} + receive(LobbyController) : void
                {method} + receive(ModelInstance) : void
                {method} + receive(GameState) : void
            }

            ServerMessage ^... SetCrewMessage
            class SetCrewMessage{
                {field} - [final] coords : ShipCoords
                {field} - [final] type : AlienType
                {method} + receive(MainServerController) : void
                {method} + receive(LobbyController) : void
                {method} + receive(ModelInstance) : void
                {method} + receive(GameState) : void
            }

            ServerMessage ^..... TakeDiscardedComponentMessage
            class TakeDiscardedComponentMessage {
                {field} - [final] id : int
                {method} + receive(MainServerController) : void
                {method} + receive(LobbyController) : void
                {method} + receive(ModelInstance) : void
                {method} + receive(GameState) : void
            }

            ServerMessage ^... TurnOnMessage
            class TurnOnMessage{
                {field} - [final] target : ShipCoords
                {field} - [final] battery : ShipCoords
                {method} + receive(MainServerController) : void
                {method} + receive(LobbyController) : void
                {method} + receive(ModelInstance) : void
                {method} + receive(GameState) : void
                {method} + receive(CardState) : void
            }
            
            ServerMessage ^..... RemoveCrewMessage
            class RemoveCrewMessage{
                {field} - [final] coords : ShipCoords
                {method} + receive(MainServerController) : void
                {method} + receive(LobbyController) : void
                {method} + receive(ModelInstance) : void
                {method} + receive(GameState) : void
                {method} + receive(CardState) : void
            }

            ServerMessage ^... TakeRewardMessage
            class TakeRewardMessage {
                {field} - [final] took : boolean
                {method} + receive(MainServerController) : void
                {method} + receive(LobbyController) : void
                {method} + receive(ModelInstance) : void
                {method} + receive(GameState) : void
                {method} + receive(CardState) : void
            }

            ServerMessage ^..... TakeCargoMessage
            class TakeCargoMessage{
                {field} - [final] coords : ShipCoords
                {field} - [final] type : ShipmentType
                {method} + receive(MainServerController) : void
                {method} + receive(LobbyController) : void
                {method} + receive(ModelInstance) : void
                {method} + receive(GameState) : void
                {method} + receive(CardState) : void
            }

            ServerMessage ^... SelectLandingMessage
            class SelectLandingMessage {
                {field} - [final] id : int
                {method} + receive(MainServerController) : void
                {method} + receive(LobbyController) : void
                {method} + receive(ModelInstance) : void
                {method} + receive(GameState) : void
                {method} + receive(CardState) : void
            }

            ServerMessage ^..... UsernameSetupMessage
            class UsernameSetupMessage {
                {field} - [final] username : String
                {method} + receive(MainServerController) : void
                {method} + getUsername() : String
            }

            ServerMessage ^... PingMessage
            class PingMessage{
                {method} + receive(MainServerController) : void
                {method} + receive(LobbyController) : void
            }

        }

        ServerMessage ^..... ReserveComponentMessage
        class ReserveComponentMessage {
            {method} + receive(MainServerController) : void
            {method} + receive(LobbyController) : void
            {method} + receive(ModelInstance) : void
            {method} + receive(GameState) : void
        }

        Message ^-- ClientMessage::ClientMessage
        package ClientMessage {

            abstract ClientMessage <<abstract>> {
                {method} + [abstract] receive(ConnectedState) : void
            }

            ClientMessage ^... ClientDisconnectMessage
            class ClientDisconnectMessage {
                {method} + [abstract] receive(ConnectedState) : void
            }

            class NotifyStateUpdateMessage {
                {field} - [final] state : ClientState
                {method} + [abstract] receive(ConnectedState) : void
            }

            ClientMessage ^..... ViewMessage
            class ViewMessage{
                {field} - [final] message : String
                {method} + [abstract] receive(ConnectedState) : void
            }

        }
        
    }

}
@enduml


