@startuml controller
hide circle
skinparam classFontStyle bold
skinparam groupInheritance 1
set separator ::
skinparam classAttributeIconSize 12



' format unfinished games: list form
' 1 - game_id - num_players - player_name_0, .. , player_name_num_players-1.

package Controller{

    package Client{

        abstract ClientConnection{
            {method} # sendMessage(Message) : void
            {method} # close() : void
        }

        ClientConnection^..ClientRMIServerStub
        class ClientRMIServerStub{
            TODO
            {method} + sendMessage(Message) : void
            {method} + close() : void
        }

        ClientConnection^..ClientSocket
        class ClientSocket{
            TODO
            {method} + sendMessage(Message) : void
            {method} + close() : void
        }

        iClientGameController^--ClientGameController
        ClientConnection<--ClientGameController:Server
        class ClientGameController{
            {field} - model : ModelView
            {field} - state : GameState
            {field} - listener : ViewListener
            {method} + 
            {method} + ping() : void 
        }

    }

    package Server{

        class ClientDescriptor{
            {field} - username: String
            {field} - color : PlayerColor
            {field} - disconnected : boolean
            {method} + getUsername() : String
            {method} + getColor() : PlayerColor
            {method} + getDisconnected() : boolean
            {method} + sendMessage(ClientMessage m) : void
        }

        Connection<-ClientDescriptor:connection
        abstract Connection {
            {method} # sendMessage(Message) : void
            {method} # close() : void
        }

        Connection^.. RMIConnection
        class RMIConnection {
            TODO
            {method} + sendMessage(Message) : void
            {method} + close() : void
        }

        Connection^.. SocketConnection
        class SocketConnection {
            TODO
            {method} + sendMessage(Message) : void
            {method} + close() : void
        }

        ServerController <---> Server:Controller
        class Server <<singleton>>{
            {field} - instance : Server
            {method} + run() : void
            {method} + accept(RmiConnection) : ClientRMIServerStub
            {method} + getInstance() : Server  <<static>>
        }


        class ModelInstance{
            {field} - player_ships : SpaceShip[]
            {field} - planche : iPlanche
            {field} - board : iCommonBoard
            {field} - card_piles : iCards[]
            {method} + getShip(PlayerColor) : SpaceShip
            {method} + getPlanche() : iPlanche 
            {method} + getBoard() : iCommonBoard
            {method} + getCard(int) : iCard
        }

        ClientDescriptor <--- "0..4  " ServerController:players
        ModelInstance<-ServerController:model
        class ServerController{
            {field} - waiting : boolean
            {method} + disconnect() : void

            {method} + sendContinue() : void
            {method} + putComponent(ClientDescriptor, ShipCoords, ComponentRotation, int) : void
            {method} + takeComponent(ClientDescriptor) : void
            {method} + takeDiscarded(ClientDescriptor, int) : void
            {method} + discardComponent(ClientDescriptor, int component_id) : void
            {method} + toggleHourglass(ClientDescriptor) : void
            {method} + removeComponent(ClientDescriptor, ShipCoords) : void
            {method} + setCrewType(ClientDescriptor, ShipCoords, AlienType) : void

            {method} + setNewShipCenter(ClientDescriptor, ShipCoords) : void
            {method} + turnOn(ClientDescriptor, ShipCoords, ShipCoords) : void
            {method} + removeCrew(ClientDescriptor, ShipCoords[]) : void
            {method} + removeCargo(ClientDescriptor, ShipCoords[]) : void
            {method} + takeCargo(ClientDescriptor, ShipmentType, ShipCoords) : void
            {method} + selectLanding(ClientDescriptor, int) : void
            {method} + removeCrew(ClientDescriptor, ShipCoords) : void
            {method} + askUpdateState(ClientDescriptor) : void
            {method} + progressTurn(ClientDescriptor) : void

            {method} + giveUp(ClientDescriptor) : void
            {method} + ping(ClientDescriptor) : void
        }

        GameState<-- ServerController:state
        abstract GameState <<abstract>> {
            {field} - match : MatchController
            {field} - model : ModelInstance
            {field} - plist : ClientDescriptor[]
            {method} + action(ModelInstance instance) : void
            {method} + finished() : boolean
            {method} + transition() : void 
            {method} + ping(ClientDescriptor) : void
        }

        GameState^.. ConstructionState
        class ConstructionState{
            {field} - match : MatchController
            {field} - model : ModelInstance
            {field} - plist : ClientDescriptor[]
            {method} + action(ModelInstance instance) : void
            {method} + finished() : boolean
            {method} + transition() : void 
            {method} + putComponent(ClientDescriptor, ShipCoords, ComponentRotation, int) : void
            {method} + takeComponent(ClientDescriptor) : void
            {method} + takeDiscarded(ClientDescriptor, int) : void
            {method} + discardComponent(ClientDescriptor, int component_id) : void
            {method} + toggleHourglass(ClientDescriptor) : void
        }

        GameState^.. VerifyState
        class VerifyState{
            {field} - match : MatchController
            {field} - model : ModelInstance
            {field} - plist : ClientDescriptor[]
            {method} + action(ModelInstance instance) : void
            {method} + finished() : boolean
            {method} + transition() : void 
            {method} + removeComponent(ClientDescriptor, ShipCoords) : void
            {method} + setCrewType(ClientDescriptor, ShipCoords, AlienType) : void
        }
        
        GameState^.. VoyageState
        class VoyageState{
            {field} - await : PlayerColor
            {field} - respt : ResponseType
            {field} - match : MatchController
            {field} - model : ModelInstance
            {field} - plist : ClientDescriptor[]
            {method} + action(ModelInstance instance) : void
            {method} + finished() : boolean
            {method} + transition() : void 
            {method} + setNewShipCenter(ClientDescriptor, ShipCoords) : void
            {method} + turnOn(ClientDescriptor, ShipCoords, ShipCoords) : void
            {method} + removeCrew(ClientDescriptor, ShipCoords[]) : void
            {method} + takeCargo(ClientDescriptor, ShipmentType, ShipCoords) : void
            {method} + selectLanding(ClientDescriptor, int) : void
            {method} + askUpdateState(ClientDescriptor) : void
            {method} + progressTurn(ClientDescriptor) : void
        }

        GameState^.. LeaderboardState
        class LeaderboardState{
            {field} - match : MatchController
            {field} - model : ModelInstance
            {field} - plist : ClientDescriptor[]
            {method} + action(ModelInstance instance) : void
            {method} + finished() : boolean
            {method} + transition() : void 
        }

    }

    'TODO creare classe stub per il client.
    iClientGameController .. SocketConnection
    iClientGameController .. RMIConnection

    ClientRMIServerStub .. Server::Server
    ClientSocket .. Server::Server

    package Message{

        interface Message <<interface, serializable>>

        Message^------ ServerMessage::ServerMessage
        package ServerMessage{
            abstract ServerMessage <<abstract>> {

            }

            class DisconnectMessage{

            }

            ServerMessage^..... AcceptMessage
            class AcceptMessage{

            }

            ServerMessage^... PlaceComponentMessage
            class PlaceComponentMessage{

            }

            ServerMessage^..... PullComponentMessage
            class PullComponentMessage{

            }

            ServerMessage^... PullDiscardedMessage
            class PullDiscardedMessage{

            }

            ServerMessage^..... DiscardComponentMessage
            class DiscardComponentMessage{

            }

            ServerMessage^... ToggleHourglassMessage
            class ToggleHourglassMessage{

            }

            ServerMessage^..... ComponentDeleteMessage
            class ComponentDeleteMessage{

            }
            
            ServerMessage^... SetCrewMessage
            class SetCrewMessage{

            }

            ServerMessage^..... NewShipCenterMessage
            class NewShipCenterMessage{

            }

            ServerMessage^... TurnOnMessage
            class TurnOnMessage{

            }
            
            ServerMessage^..... RemoveCrewMessage
            class RemoveCrewMessage{

            }
            
            ServerMessage^... RemoveCargoMessage
            class RemoveCargoMessage{

            }
            
            ServerMessage^..... TakeCargoMessage
            class TakeCargoMessage{

            }

            ServerMessage^... SelectLandingMessage
            class SelectLandingMessage{

            }
            
            ServerMessage^..... GiveUpMessage
            class GiveUpMessage{

            }

            ServerMessage^... ServerPingMessage
            class ServerPingMessage{

            }

        }

        Message^-- ClientMessage::ClientMessage
        package ClientMessage {

            abstract ClientMessage <<abstract>> {
        
            }

            class DisconnectMessage {

            }

            ClientMessage^..... NotifyCardStateUpdateMessage
            class NotifyCardStateUpdateMessage{

            }

            ClientMessage^..... NotifyPlayerUpdateMessage
            class NotifyPlayerUpdateMessage{

            }

            ClientMessage^..... NotifyCardStateUpdateMessage
            class NotifyCardStateUpdateMessage{
                
            }

            ClientMessage^..... PingMessage
            class PingMessage{

            }

            ClientMessage^..... ViewMessage
            class ViewMessage{

            }

        }

        ServerMessage::ClientMessage^... ServerMessage::DisconnectMessage
        
        ClientMessage::ClientMessage^... ClientMessage::DisconnectMessage
        
    }

}
@enduml


